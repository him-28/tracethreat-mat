#include "data_structure/ac_tire.hpp"

namespace data_structure
{
using namespace std;
using namespace boost::assign;

template <typename KeywordStoreT>
struct Results
{
    Results(KeywordStoreT const & keywords, bool summary = false)
    :   keywords_(keywords),
        hits_(keywords.size()),
        summary_(summary)
    {
    }

    void operator()(size_t what, size_t where)
    {
        if (!summary_)
            cerr << "[" << where << "]" << keywords_[what] << endl;
        else
            cerr << ".";
        hits_[what].insert(where);
    }

    KeywordStoreT const &keywords_;
    vector<set<size_t> > hits_;
    bool summary_;
};

typedef vector<set<size_t> > (*test_function_t)(vector<string> const &, char const *, char const *);

vector<set<size_t> >
matt_test_function(vector<string> const & keywords, char const *begin, char const *end)
{
    AhoCorasick<char> ac(keywords.begin(), keywords.end());
    Results <vector<string> > results(keywords);
	
    ac.search(begin, end, results);
    return results.hits_;
}

//add matt_test_function
static vector<test_function_t> test_functions =
        list_of(&matt_test_function);

typedef struct {
    vector<string> keywords;
    char const *input;
    vector<set<size_t> > expected;
} TestData;


}
