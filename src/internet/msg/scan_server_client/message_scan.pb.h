// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_scan.proto

#ifndef PROTOBUF_message_5fscan_2eproto__INCLUDED
#define PROTOBUF_message_5fscan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace message_scan {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_5fscan_2eproto();
void protobuf_AssignDesc_message_5fscan_2eproto();
void protobuf_ShutdownFile_message_5fscan_2eproto();

class RequestScan;
class RequestScan_RequestGetBinaryValue;
class RequestScan_RequestSetBinaryValue;
class ResponseScan;
class ResponseScan_ResponseGetBinaryValue;
class ResponseScan_ResponseSetBinaryValue;

enum RequestScan_EncodeType {
  RequestScan_EncodeType_MD5 = 1,
  RequestScan_EncodeType_MD5_HEADER = 2,
  RequestScan_EncodeType_MD5_BODY = 3,
  RequestScan_EncodeType_SHA_1 = 4,
  RequestScan_EncodeType_SHA_256 = 5,
  RequestScan_EncodeType_SSDEEP = 6
};
bool RequestScan_EncodeType_IsValid(int value);
const RequestScan_EncodeType RequestScan_EncodeType_EncodeType_MIN = RequestScan_EncodeType_MD5;
const RequestScan_EncodeType RequestScan_EncodeType_EncodeType_MAX = RequestScan_EncodeType_SSDEEP;
const int RequestScan_EncodeType_EncodeType_ARRAYSIZE = RequestScan_EncodeType_EncodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestScan_EncodeType_descriptor();
inline const ::std::string& RequestScan_EncodeType_Name(RequestScan_EncodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestScan_EncodeType_descriptor(), value);
}
inline bool RequestScan_EncodeType_Parse(
    const ::std::string& name, RequestScan_EncodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestScan_EncodeType>(
    RequestScan_EncodeType_descriptor(), name, value);
}
enum RequestScan_FileType {
  RequestScan_FileType_PE = 1,
  RequestScan_FileType_ELF = 2,
  RequestScan_FileType_PROCESS = 3
};
bool RequestScan_FileType_IsValid(int value);
const RequestScan_FileType RequestScan_FileType_FileType_MIN = RequestScan_FileType_PE;
const RequestScan_FileType RequestScan_FileType_FileType_MAX = RequestScan_FileType_PROCESS;
const int RequestScan_FileType_FileType_ARRAYSIZE = RequestScan_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestScan_FileType_descriptor();
inline const ::std::string& RequestScan_FileType_Name(RequestScan_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestScan_FileType_descriptor(), value);
}
inline bool RequestScan_FileType_Parse(
    const ::std::string& name, RequestScan_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestScan_FileType>(
    RequestScan_FileType_descriptor(), name, value);
}
enum RequestScan_RequestType {
  RequestScan_RequestType_REGISTER = 1,
  RequestScan_RequestType_SCAN = 2,
  RequestScan_RequestType_RESULT = 3
};
bool RequestScan_RequestType_IsValid(int value);
const RequestScan_RequestType RequestScan_RequestType_RequestType_MIN = RequestScan_RequestType_REGISTER;
const RequestScan_RequestType RequestScan_RequestType_RequestType_MAX = RequestScan_RequestType_RESULT;
const int RequestScan_RequestType_RequestType_ARRAYSIZE = RequestScan_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestScan_RequestType_descriptor();
inline const ::std::string& RequestScan_RequestType_Name(RequestScan_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestScan_RequestType_descriptor(), value);
}
inline bool RequestScan_RequestType_Parse(
    const ::std::string& name, RequestScan_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestScan_RequestType>(
    RequestScan_RequestType_descriptor(), name, value);
}
// ===================================================================

class RequestScan_RequestGetBinaryValue : public ::google::protobuf::Message {
 public:
  RequestScan_RequestGetBinaryValue();
  virtual ~RequestScan_RequestGetBinaryValue();

  RequestScan_RequestGetBinaryValue(const RequestScan_RequestGetBinaryValue& from);

  inline RequestScan_RequestGetBinaryValue& operator=(const RequestScan_RequestGetBinaryValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestScan_RequestGetBinaryValue& default_instance();

  void Swap(RequestScan_RequestGetBinaryValue* other);

  // implements Message ----------------------------------------------

  RequestScan_RequestGetBinaryValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestScan_RequestGetBinaryValue& from);
  void MergeFrom(const RequestScan_RequestGetBinaryValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string binary = 1;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 1;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const char* value, size_t size);
  inline ::std::string* mutable_binary();
  inline ::std::string* release_binary();
  inline void set_allocated_binary(::std::string* binary);

  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional uint64 file_size = 3;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  inline bool has_scan_type() const;
  inline void clear_scan_type();
  static const int kScanTypeFieldNumber = 4;
  inline ::message_scan::RequestScan_EncodeType scan_type() const;
  inline void set_scan_type(::message_scan::RequestScan_EncodeType value);

  // optional .message_scan.RequestScan.FileType file_type = 5;
  inline bool has_file_type() const;
  inline void clear_file_type();
  static const int kFileTypeFieldNumber = 5;
  inline ::message_scan::RequestScan_FileType file_type() const;
  inline void set_file_type(::message_scan::RequestScan_FileType value);

  // @@protoc_insertion_point(class_scope:message_scan.RequestScan.RequestGetBinaryValue)
 private:
  inline void set_has_binary();
  inline void clear_has_binary();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_scan_type();
  inline void clear_has_scan_type();
  inline void set_has_file_type();
  inline void clear_has_file_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* binary_;
  ::std::string* file_name_;
  ::google::protobuf::uint64 file_size_;
  int scan_type_;
  int file_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fscan_2eproto();
  friend void protobuf_AssignDesc_message_5fscan_2eproto();
  friend void protobuf_ShutdownFile_message_5fscan_2eproto();

  void InitAsDefaultInstance();
  static RequestScan_RequestGetBinaryValue* default_instance_;
};
// -------------------------------------------------------------------

class RequestScan_RequestSetBinaryValue : public ::google::protobuf::Message {
 public:
  RequestScan_RequestSetBinaryValue();
  virtual ~RequestScan_RequestSetBinaryValue();

  RequestScan_RequestSetBinaryValue(const RequestScan_RequestSetBinaryValue& from);

  inline RequestScan_RequestSetBinaryValue& operator=(const RequestScan_RequestSetBinaryValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestScan_RequestSetBinaryValue& default_instance();

  void Swap(RequestScan_RequestSetBinaryValue* other);

  // implements Message ----------------------------------------------

  RequestScan_RequestSetBinaryValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestScan_RequestSetBinaryValue& from);
  void MergeFrom(const RequestScan_RequestSetBinaryValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string binary = 1;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 1;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const char* value, size_t size);
  inline ::std::string* mutable_binary();
  inline ::std::string* release_binary();
  inline void set_allocated_binary(::std::string* binary);

  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional uint64 file_size = 3;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  inline bool has_scan_type() const;
  inline void clear_scan_type();
  static const int kScanTypeFieldNumber = 4;
  inline ::message_scan::RequestScan_EncodeType scan_type() const;
  inline void set_scan_type(::message_scan::RequestScan_EncodeType value);

  // optional .message_scan.RequestScan.FileType file_type = 5;
  inline bool has_file_type() const;
  inline void clear_file_type();
  static const int kFileTypeFieldNumber = 5;
  inline ::message_scan::RequestScan_FileType file_type() const;
  inline void set_file_type(::message_scan::RequestScan_FileType value);

  // @@protoc_insertion_point(class_scope:message_scan.RequestScan.RequestSetBinaryValue)
 private:
  inline void set_has_binary();
  inline void clear_has_binary();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_scan_type();
  inline void clear_has_scan_type();
  inline void set_has_file_type();
  inline void clear_has_file_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* binary_;
  ::std::string* file_name_;
  ::google::protobuf::uint64 file_size_;
  int scan_type_;
  int file_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fscan_2eproto();
  friend void protobuf_AssignDesc_message_5fscan_2eproto();
  friend void protobuf_ShutdownFile_message_5fscan_2eproto();

  void InitAsDefaultInstance();
  static RequestScan_RequestSetBinaryValue* default_instance_;
};
// -------------------------------------------------------------------

class RequestScan : public ::google::protobuf::Message {
 public:
  RequestScan();
  virtual ~RequestScan();

  RequestScan(const RequestScan& from);

  inline RequestScan& operator=(const RequestScan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestScan& default_instance();

  void Swap(RequestScan* other);

  // implements Message ----------------------------------------------

  RequestScan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestScan& from);
  void MergeFrom(const RequestScan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RequestScan_RequestGetBinaryValue RequestGetBinaryValue;
  typedef RequestScan_RequestSetBinaryValue RequestSetBinaryValue;

  typedef RequestScan_EncodeType EncodeType;
  static const EncodeType MD5 = RequestScan_EncodeType_MD5;
  static const EncodeType MD5_HEADER = RequestScan_EncodeType_MD5_HEADER;
  static const EncodeType MD5_BODY = RequestScan_EncodeType_MD5_BODY;
  static const EncodeType SHA_1 = RequestScan_EncodeType_SHA_1;
  static const EncodeType SHA_256 = RequestScan_EncodeType_SHA_256;
  static const EncodeType SSDEEP = RequestScan_EncodeType_SSDEEP;
  static inline bool EncodeType_IsValid(int value) {
    return RequestScan_EncodeType_IsValid(value);
  }
  static const EncodeType EncodeType_MIN =
    RequestScan_EncodeType_EncodeType_MIN;
  static const EncodeType EncodeType_MAX =
    RequestScan_EncodeType_EncodeType_MAX;
  static const int EncodeType_ARRAYSIZE =
    RequestScan_EncodeType_EncodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EncodeType_descriptor() {
    return RequestScan_EncodeType_descriptor();
  }
  static inline const ::std::string& EncodeType_Name(EncodeType value) {
    return RequestScan_EncodeType_Name(value);
  }
  static inline bool EncodeType_Parse(const ::std::string& name,
      EncodeType* value) {
    return RequestScan_EncodeType_Parse(name, value);
  }

  typedef RequestScan_FileType FileType;
  static const FileType PE = RequestScan_FileType_PE;
  static const FileType ELF = RequestScan_FileType_ELF;
  static const FileType PROCESS = RequestScan_FileType_PROCESS;
  static inline bool FileType_IsValid(int value) {
    return RequestScan_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    RequestScan_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    RequestScan_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    RequestScan_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return RequestScan_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return RequestScan_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return RequestScan_FileType_Parse(name, value);
  }

  typedef RequestScan_RequestType RequestType;
  static const RequestType REGISTER = RequestScan_RequestType_REGISTER;
  static const RequestType SCAN = RequestScan_RequestType_SCAN;
  static const RequestType RESULT = RequestScan_RequestType_RESULT;
  static inline bool RequestType_IsValid(int value) {
    return RequestScan_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    RequestScan_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    RequestScan_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    RequestScan_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return RequestScan_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return RequestScan_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return RequestScan_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .message_scan.RequestScan.RequestType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::message_scan::RequestScan_RequestType type() const;
  inline void set_type(::message_scan::RequestScan_RequestType value);

  // required string uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional .message_scan.RequestScan.RequestGetBinaryValue request_get_binary_value = 4;
  inline bool has_request_get_binary_value() const;
  inline void clear_request_get_binary_value();
  static const int kRequestGetBinaryValueFieldNumber = 4;
  inline const ::message_scan::RequestScan_RequestGetBinaryValue& request_get_binary_value() const;
  inline ::message_scan::RequestScan_RequestGetBinaryValue* mutable_request_get_binary_value();
  inline ::message_scan::RequestScan_RequestGetBinaryValue* release_request_get_binary_value();
  inline void set_allocated_request_get_binary_value(::message_scan::RequestScan_RequestGetBinaryValue* request_get_binary_value);

  // repeated .message_scan.RequestScan.RequestSetBinaryValue request_set_binary_value = 5;
  inline int request_set_binary_value_size() const;
  inline void clear_request_set_binary_value();
  static const int kRequestSetBinaryValueFieldNumber = 5;
  inline const ::message_scan::RequestScan_RequestSetBinaryValue& request_set_binary_value(int index) const;
  inline ::message_scan::RequestScan_RequestSetBinaryValue* mutable_request_set_binary_value(int index);
  inline ::message_scan::RequestScan_RequestSetBinaryValue* add_request_set_binary_value();
  inline const ::google::protobuf::RepeatedPtrField< ::message_scan::RequestScan_RequestSetBinaryValue >&
      request_set_binary_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::message_scan::RequestScan_RequestSetBinaryValue >*
      mutable_request_set_binary_value();

  // @@protoc_insertion_point(class_scope:message_scan.RequestScan)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_request_get_binary_value();
  inline void clear_has_request_get_binary_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  ::std::string* timestamp_;
  ::message_scan::RequestScan_RequestGetBinaryValue* request_get_binary_value_;
  ::google::protobuf::RepeatedPtrField< ::message_scan::RequestScan_RequestSetBinaryValue > request_set_binary_value_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fscan_2eproto();
  friend void protobuf_AssignDesc_message_5fscan_2eproto();
  friend void protobuf_ShutdownFile_message_5fscan_2eproto();

  void InitAsDefaultInstance();
  static RequestScan* default_instance_;
};
// -------------------------------------------------------------------

class ResponseScan_ResponseGetBinaryValue : public ::google::protobuf::Message {
 public:
  ResponseScan_ResponseGetBinaryValue();
  virtual ~ResponseScan_ResponseGetBinaryValue();

  ResponseScan_ResponseGetBinaryValue(const ResponseScan_ResponseGetBinaryValue& from);

  inline ResponseScan_ResponseGetBinaryValue& operator=(const ResponseScan_ResponseGetBinaryValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseScan_ResponseGetBinaryValue& default_instance();

  void Swap(ResponseScan_ResponseGetBinaryValue* other);

  // implements Message ----------------------------------------------

  ResponseScan_ResponseGetBinaryValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseScan_ResponseGetBinaryValue& from);
  void MergeFrom(const ResponseScan_ResponseGetBinaryValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string binary = 1;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 1;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const char* value, size_t size);
  inline ::std::string* mutable_binary();
  inline ::std::string* release_binary();
  inline void set_allocated_binary(::std::string* binary);

  // required string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional bool status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline bool status() const;
  inline void set_status(bool value);

  // optional uint64 file_size = 4;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message_scan.ResponseScan.ResponseGetBinaryValue)
 private:
  inline void set_has_binary();
  inline void clear_has_binary();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_file_size();
  inline void clear_has_file_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* binary_;
  ::std::string* file_name_;
  ::google::protobuf::uint64 file_size_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fscan_2eproto();
  friend void protobuf_AssignDesc_message_5fscan_2eproto();
  friend void protobuf_ShutdownFile_message_5fscan_2eproto();

  void InitAsDefaultInstance();
  static ResponseScan_ResponseGetBinaryValue* default_instance_;
};
// -------------------------------------------------------------------

class ResponseScan_ResponseSetBinaryValue : public ::google::protobuf::Message {
 public:
  ResponseScan_ResponseSetBinaryValue();
  virtual ~ResponseScan_ResponseSetBinaryValue();

  ResponseScan_ResponseSetBinaryValue(const ResponseScan_ResponseSetBinaryValue& from);

  inline ResponseScan_ResponseSetBinaryValue& operator=(const ResponseScan_ResponseSetBinaryValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseScan_ResponseSetBinaryValue& default_instance();

  void Swap(ResponseScan_ResponseSetBinaryValue* other);

  // implements Message ----------------------------------------------

  ResponseScan_ResponseSetBinaryValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseScan_ResponseSetBinaryValue& from);
  void MergeFrom(const ResponseScan_ResponseSetBinaryValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string binary = 1;
  inline bool has_binary() const;
  inline void clear_binary();
  static const int kBinaryFieldNumber = 1;
  inline const ::std::string& binary() const;
  inline void set_binary(const ::std::string& value);
  inline void set_binary(const char* value);
  inline void set_binary(const char* value, size_t size);
  inline ::std::string* mutable_binary();
  inline ::std::string* release_binary();
  inline void set_allocated_binary(::std::string* binary);

  // required string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional bool status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline bool status() const;
  inline void set_status(bool value);

  // optional uint64 file_size = 4;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message_scan.ResponseScan.ResponseSetBinaryValue)
 private:
  inline void set_has_binary();
  inline void clear_has_binary();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_file_size();
  inline void clear_has_file_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* binary_;
  ::std::string* file_name_;
  ::google::protobuf::uint64 file_size_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fscan_2eproto();
  friend void protobuf_AssignDesc_message_5fscan_2eproto();
  friend void protobuf_ShutdownFile_message_5fscan_2eproto();

  void InitAsDefaultInstance();
  static ResponseScan_ResponseSetBinaryValue* default_instance_;
};
// -------------------------------------------------------------------

class ResponseScan : public ::google::protobuf::Message {
 public:
  ResponseScan();
  virtual ~ResponseScan();

  ResponseScan(const ResponseScan& from);

  inline ResponseScan& operator=(const ResponseScan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseScan& default_instance();

  void Swap(ResponseScan* other);

  // implements Message ----------------------------------------------

  ResponseScan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseScan& from);
  void MergeFrom(const ResponseScan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResponseScan_ResponseGetBinaryValue ResponseGetBinaryValue;
  typedef ResponseScan_ResponseSetBinaryValue ResponseSetBinaryValue;

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional .message_scan.ResponseScan.ResponseGetBinaryValue response_get_binary_value = 3;
  inline bool has_response_get_binary_value() const;
  inline void clear_response_get_binary_value();
  static const int kResponseGetBinaryValueFieldNumber = 3;
  inline const ::message_scan::ResponseScan_ResponseGetBinaryValue& response_get_binary_value() const;
  inline ::message_scan::ResponseScan_ResponseGetBinaryValue* mutable_response_get_binary_value();
  inline ::message_scan::ResponseScan_ResponseGetBinaryValue* release_response_get_binary_value();
  inline void set_allocated_response_get_binary_value(::message_scan::ResponseScan_ResponseGetBinaryValue* response_get_binary_value);

  // optional .message_scan.ResponseScan.ResponseSetBinaryValue reponse_set_binary_value = 4;
  inline bool has_reponse_set_binary_value() const;
  inline void clear_reponse_set_binary_value();
  static const int kReponseSetBinaryValueFieldNumber = 4;
  inline const ::message_scan::ResponseScan_ResponseSetBinaryValue& reponse_set_binary_value() const;
  inline ::message_scan::ResponseScan_ResponseSetBinaryValue* mutable_reponse_set_binary_value();
  inline ::message_scan::ResponseScan_ResponseSetBinaryValue* release_reponse_set_binary_value();
  inline void set_allocated_reponse_set_binary_value(::message_scan::ResponseScan_ResponseSetBinaryValue* reponse_set_binary_value);

  // @@protoc_insertion_point(class_scope:message_scan.ResponseScan)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_response_get_binary_value();
  inline void clear_has_response_get_binary_value();
  inline void set_has_reponse_set_binary_value();
  inline void clear_has_reponse_set_binary_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;
  ::std::string* timestamp_;
  ::message_scan::ResponseScan_ResponseGetBinaryValue* response_get_binary_value_;
  ::message_scan::ResponseScan_ResponseSetBinaryValue* reponse_set_binary_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fscan_2eproto();
  friend void protobuf_AssignDesc_message_5fscan_2eproto();
  friend void protobuf_ShutdownFile_message_5fscan_2eproto();

  void InitAsDefaultInstance();
  static ResponseScan* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestScan_RequestGetBinaryValue

// optional string binary = 1;
inline bool RequestScan_RequestGetBinaryValue::has_binary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestScan_RequestGetBinaryValue::set_has_binary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestScan_RequestGetBinaryValue::clear_has_binary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestScan_RequestGetBinaryValue::clear_binary() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    binary_->clear();
  }
  clear_has_binary();
}
inline const ::std::string& RequestScan_RequestGetBinaryValue::binary() const {
  return *binary_;
}
inline void RequestScan_RequestGetBinaryValue::set_binary(const ::std::string& value) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void RequestScan_RequestGetBinaryValue::set_binary(const char* value) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void RequestScan_RequestGetBinaryValue::set_binary(const char* value, size_t size) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestScan_RequestGetBinaryValue::mutable_binary() {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  return binary_;
}
inline ::std::string* RequestScan_RequestGetBinaryValue::release_binary() {
  clear_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binary_;
    binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestScan_RequestGetBinaryValue::set_allocated_binary(::std::string* binary) {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (binary) {
    set_has_binary();
    binary_ = binary;
  } else {
    clear_has_binary();
    binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string file_name = 2;
inline bool RequestScan_RequestGetBinaryValue::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestScan_RequestGetBinaryValue::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestScan_RequestGetBinaryValue::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestScan_RequestGetBinaryValue::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& RequestScan_RequestGetBinaryValue::file_name() const {
  return *file_name_;
}
inline void RequestScan_RequestGetBinaryValue::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void RequestScan_RequestGetBinaryValue::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void RequestScan_RequestGetBinaryValue::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestScan_RequestGetBinaryValue::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* RequestScan_RequestGetBinaryValue::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestScan_RequestGetBinaryValue::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 file_size = 3;
inline bool RequestScan_RequestGetBinaryValue::has_file_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestScan_RequestGetBinaryValue::set_has_file_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestScan_RequestGetBinaryValue::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestScan_RequestGetBinaryValue::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 RequestScan_RequestGetBinaryValue::file_size() const {
  return file_size_;
}
inline void RequestScan_RequestGetBinaryValue::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// optional .message_scan.RequestScan.EncodeType scan_type = 4;
inline bool RequestScan_RequestGetBinaryValue::has_scan_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestScan_RequestGetBinaryValue::set_has_scan_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestScan_RequestGetBinaryValue::clear_has_scan_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestScan_RequestGetBinaryValue::clear_scan_type() {
  scan_type_ = 1;
  clear_has_scan_type();
}
inline ::message_scan::RequestScan_EncodeType RequestScan_RequestGetBinaryValue::scan_type() const {
  return static_cast< ::message_scan::RequestScan_EncodeType >(scan_type_);
}
inline void RequestScan_RequestGetBinaryValue::set_scan_type(::message_scan::RequestScan_EncodeType value) {
  assert(::message_scan::RequestScan_EncodeType_IsValid(value));
  set_has_scan_type();
  scan_type_ = value;
}

// optional .message_scan.RequestScan.FileType file_type = 5;
inline bool RequestScan_RequestGetBinaryValue::has_file_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestScan_RequestGetBinaryValue::set_has_file_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestScan_RequestGetBinaryValue::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestScan_RequestGetBinaryValue::clear_file_type() {
  file_type_ = 1;
  clear_has_file_type();
}
inline ::message_scan::RequestScan_FileType RequestScan_RequestGetBinaryValue::file_type() const {
  return static_cast< ::message_scan::RequestScan_FileType >(file_type_);
}
inline void RequestScan_RequestGetBinaryValue::set_file_type(::message_scan::RequestScan_FileType value) {
  assert(::message_scan::RequestScan_FileType_IsValid(value));
  set_has_file_type();
  file_type_ = value;
}

// -------------------------------------------------------------------

// RequestScan_RequestSetBinaryValue

// optional string binary = 1;
inline bool RequestScan_RequestSetBinaryValue::has_binary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestScan_RequestSetBinaryValue::set_has_binary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestScan_RequestSetBinaryValue::clear_has_binary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestScan_RequestSetBinaryValue::clear_binary() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    binary_->clear();
  }
  clear_has_binary();
}
inline const ::std::string& RequestScan_RequestSetBinaryValue::binary() const {
  return *binary_;
}
inline void RequestScan_RequestSetBinaryValue::set_binary(const ::std::string& value) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void RequestScan_RequestSetBinaryValue::set_binary(const char* value) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void RequestScan_RequestSetBinaryValue::set_binary(const char* value, size_t size) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestScan_RequestSetBinaryValue::mutable_binary() {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  return binary_;
}
inline ::std::string* RequestScan_RequestSetBinaryValue::release_binary() {
  clear_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binary_;
    binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestScan_RequestSetBinaryValue::set_allocated_binary(::std::string* binary) {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (binary) {
    set_has_binary();
    binary_ = binary;
  } else {
    clear_has_binary();
    binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string file_name = 2;
inline bool RequestScan_RequestSetBinaryValue::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestScan_RequestSetBinaryValue::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestScan_RequestSetBinaryValue::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestScan_RequestSetBinaryValue::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& RequestScan_RequestSetBinaryValue::file_name() const {
  return *file_name_;
}
inline void RequestScan_RequestSetBinaryValue::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void RequestScan_RequestSetBinaryValue::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void RequestScan_RequestSetBinaryValue::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestScan_RequestSetBinaryValue::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* RequestScan_RequestSetBinaryValue::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestScan_RequestSetBinaryValue::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 file_size = 3;
inline bool RequestScan_RequestSetBinaryValue::has_file_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestScan_RequestSetBinaryValue::set_has_file_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestScan_RequestSetBinaryValue::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestScan_RequestSetBinaryValue::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 RequestScan_RequestSetBinaryValue::file_size() const {
  return file_size_;
}
inline void RequestScan_RequestSetBinaryValue::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// optional .message_scan.RequestScan.EncodeType scan_type = 4;
inline bool RequestScan_RequestSetBinaryValue::has_scan_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestScan_RequestSetBinaryValue::set_has_scan_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestScan_RequestSetBinaryValue::clear_has_scan_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestScan_RequestSetBinaryValue::clear_scan_type() {
  scan_type_ = 1;
  clear_has_scan_type();
}
inline ::message_scan::RequestScan_EncodeType RequestScan_RequestSetBinaryValue::scan_type() const {
  return static_cast< ::message_scan::RequestScan_EncodeType >(scan_type_);
}
inline void RequestScan_RequestSetBinaryValue::set_scan_type(::message_scan::RequestScan_EncodeType value) {
  assert(::message_scan::RequestScan_EncodeType_IsValid(value));
  set_has_scan_type();
  scan_type_ = value;
}

// optional .message_scan.RequestScan.FileType file_type = 5;
inline bool RequestScan_RequestSetBinaryValue::has_file_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestScan_RequestSetBinaryValue::set_has_file_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestScan_RequestSetBinaryValue::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestScan_RequestSetBinaryValue::clear_file_type() {
  file_type_ = 1;
  clear_has_file_type();
}
inline ::message_scan::RequestScan_FileType RequestScan_RequestSetBinaryValue::file_type() const {
  return static_cast< ::message_scan::RequestScan_FileType >(file_type_);
}
inline void RequestScan_RequestSetBinaryValue::set_file_type(::message_scan::RequestScan_FileType value) {
  assert(::message_scan::RequestScan_FileType_IsValid(value));
  set_has_file_type();
  file_type_ = value;
}

// -------------------------------------------------------------------

// RequestScan

// required .message_scan.RequestScan.RequestType type = 1;
inline bool RequestScan::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestScan::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestScan::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestScan::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::message_scan::RequestScan_RequestType RequestScan::type() const {
  return static_cast< ::message_scan::RequestScan_RequestType >(type_);
}
inline void RequestScan::set_type(::message_scan::RequestScan_RequestType value) {
  assert(::message_scan::RequestScan_RequestType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string uuid = 2;
inline bool RequestScan::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestScan::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestScan::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestScan::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& RequestScan::uuid() const {
  return *uuid_;
}
inline void RequestScan::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void RequestScan::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void RequestScan::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestScan::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* RequestScan::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestScan::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string timestamp = 3;
inline bool RequestScan::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestScan::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestScan::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestScan::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& RequestScan::timestamp() const {
  return *timestamp_;
}
inline void RequestScan::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void RequestScan::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void RequestScan::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestScan::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* RequestScan::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestScan::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .message_scan.RequestScan.RequestGetBinaryValue request_get_binary_value = 4;
inline bool RequestScan::has_request_get_binary_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestScan::set_has_request_get_binary_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestScan::clear_has_request_get_binary_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestScan::clear_request_get_binary_value() {
  if (request_get_binary_value_ != NULL) request_get_binary_value_->::message_scan::RequestScan_RequestGetBinaryValue::Clear();
  clear_has_request_get_binary_value();
}
inline const ::message_scan::RequestScan_RequestGetBinaryValue& RequestScan::request_get_binary_value() const {
  return request_get_binary_value_ != NULL ? *request_get_binary_value_ : *default_instance_->request_get_binary_value_;
}
inline ::message_scan::RequestScan_RequestGetBinaryValue* RequestScan::mutable_request_get_binary_value() {
  set_has_request_get_binary_value();
  if (request_get_binary_value_ == NULL) request_get_binary_value_ = new ::message_scan::RequestScan_RequestGetBinaryValue;
  return request_get_binary_value_;
}
inline ::message_scan::RequestScan_RequestGetBinaryValue* RequestScan::release_request_get_binary_value() {
  clear_has_request_get_binary_value();
  ::message_scan::RequestScan_RequestGetBinaryValue* temp = request_get_binary_value_;
  request_get_binary_value_ = NULL;
  return temp;
}
inline void RequestScan::set_allocated_request_get_binary_value(::message_scan::RequestScan_RequestGetBinaryValue* request_get_binary_value) {
  delete request_get_binary_value_;
  request_get_binary_value_ = request_get_binary_value;
  if (request_get_binary_value) {
    set_has_request_get_binary_value();
  } else {
    clear_has_request_get_binary_value();
  }
}

// repeated .message_scan.RequestScan.RequestSetBinaryValue request_set_binary_value = 5;
inline int RequestScan::request_set_binary_value_size() const {
  return request_set_binary_value_.size();
}
inline void RequestScan::clear_request_set_binary_value() {
  request_set_binary_value_.Clear();
}
inline const ::message_scan::RequestScan_RequestSetBinaryValue& RequestScan::request_set_binary_value(int index) const {
  return request_set_binary_value_.Get(index);
}
inline ::message_scan::RequestScan_RequestSetBinaryValue* RequestScan::mutable_request_set_binary_value(int index) {
  return request_set_binary_value_.Mutable(index);
}
inline ::message_scan::RequestScan_RequestSetBinaryValue* RequestScan::add_request_set_binary_value() {
  return request_set_binary_value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message_scan::RequestScan_RequestSetBinaryValue >&
RequestScan::request_set_binary_value() const {
  return request_set_binary_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::message_scan::RequestScan_RequestSetBinaryValue >*
RequestScan::mutable_request_set_binary_value() {
  return &request_set_binary_value_;
}

// -------------------------------------------------------------------

// ResponseScan_ResponseGetBinaryValue

// required string binary = 1;
inline bool ResponseScan_ResponseGetBinaryValue::has_binary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseScan_ResponseGetBinaryValue::set_has_binary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseScan_ResponseGetBinaryValue::clear_has_binary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseScan_ResponseGetBinaryValue::clear_binary() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    binary_->clear();
  }
  clear_has_binary();
}
inline const ::std::string& ResponseScan_ResponseGetBinaryValue::binary() const {
  return *binary_;
}
inline void ResponseScan_ResponseGetBinaryValue::set_binary(const ::std::string& value) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void ResponseScan_ResponseGetBinaryValue::set_binary(const char* value) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void ResponseScan_ResponseGetBinaryValue::set_binary(const char* value, size_t size) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseScan_ResponseGetBinaryValue::mutable_binary() {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  return binary_;
}
inline ::std::string* ResponseScan_ResponseGetBinaryValue::release_binary() {
  clear_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binary_;
    binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseScan_ResponseGetBinaryValue::set_allocated_binary(::std::string* binary) {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (binary) {
    set_has_binary();
    binary_ = binary;
  } else {
    clear_has_binary();
    binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string file_name = 2;
inline bool ResponseScan_ResponseGetBinaryValue::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseScan_ResponseGetBinaryValue::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseScan_ResponseGetBinaryValue::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseScan_ResponseGetBinaryValue::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& ResponseScan_ResponseGetBinaryValue::file_name() const {
  return *file_name_;
}
inline void ResponseScan_ResponseGetBinaryValue::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ResponseScan_ResponseGetBinaryValue::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ResponseScan_ResponseGetBinaryValue::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseScan_ResponseGetBinaryValue::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* ResponseScan_ResponseGetBinaryValue::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseScan_ResponseGetBinaryValue::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool status = 3;
inline bool ResponseScan_ResponseGetBinaryValue::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseScan_ResponseGetBinaryValue::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseScan_ResponseGetBinaryValue::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseScan_ResponseGetBinaryValue::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool ResponseScan_ResponseGetBinaryValue::status() const {
  return status_;
}
inline void ResponseScan_ResponseGetBinaryValue::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional uint64 file_size = 4;
inline bool ResponseScan_ResponseGetBinaryValue::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseScan_ResponseGetBinaryValue::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseScan_ResponseGetBinaryValue::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseScan_ResponseGetBinaryValue::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 ResponseScan_ResponseGetBinaryValue::file_size() const {
  return file_size_;
}
inline void ResponseScan_ResponseGetBinaryValue::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// -------------------------------------------------------------------

// ResponseScan_ResponseSetBinaryValue

// required string binary = 1;
inline bool ResponseScan_ResponseSetBinaryValue::has_binary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseScan_ResponseSetBinaryValue::set_has_binary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseScan_ResponseSetBinaryValue::clear_has_binary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseScan_ResponseSetBinaryValue::clear_binary() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    binary_->clear();
  }
  clear_has_binary();
}
inline const ::std::string& ResponseScan_ResponseSetBinaryValue::binary() const {
  return *binary_;
}
inline void ResponseScan_ResponseSetBinaryValue::set_binary(const ::std::string& value) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void ResponseScan_ResponseSetBinaryValue::set_binary(const char* value) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(value);
}
inline void ResponseScan_ResponseSetBinaryValue::set_binary(const char* value, size_t size) {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseScan_ResponseSetBinaryValue::mutable_binary() {
  set_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    binary_ = new ::std::string;
  }
  return binary_;
}
inline ::std::string* ResponseScan_ResponseSetBinaryValue::release_binary() {
  clear_has_binary();
  if (binary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binary_;
    binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseScan_ResponseSetBinaryValue::set_allocated_binary(::std::string* binary) {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (binary) {
    set_has_binary();
    binary_ = binary;
  } else {
    clear_has_binary();
    binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string file_name = 2;
inline bool ResponseScan_ResponseSetBinaryValue::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseScan_ResponseSetBinaryValue::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseScan_ResponseSetBinaryValue::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseScan_ResponseSetBinaryValue::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& ResponseScan_ResponseSetBinaryValue::file_name() const {
  return *file_name_;
}
inline void ResponseScan_ResponseSetBinaryValue::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ResponseScan_ResponseSetBinaryValue::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ResponseScan_ResponseSetBinaryValue::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseScan_ResponseSetBinaryValue::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* ResponseScan_ResponseSetBinaryValue::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseScan_ResponseSetBinaryValue::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool status = 3;
inline bool ResponseScan_ResponseSetBinaryValue::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseScan_ResponseSetBinaryValue::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseScan_ResponseSetBinaryValue::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseScan_ResponseSetBinaryValue::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool ResponseScan_ResponseSetBinaryValue::status() const {
  return status_;
}
inline void ResponseScan_ResponseSetBinaryValue::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional uint64 file_size = 4;
inline bool ResponseScan_ResponseSetBinaryValue::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseScan_ResponseSetBinaryValue::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseScan_ResponseSetBinaryValue::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseScan_ResponseSetBinaryValue::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 ResponseScan_ResponseSetBinaryValue::file_size() const {
  return file_size_;
}
inline void ResponseScan_ResponseSetBinaryValue::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// -------------------------------------------------------------------

// ResponseScan

// required string uuid = 1;
inline bool ResponseScan::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseScan::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseScan::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseScan::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ResponseScan::uuid() const {
  return *uuid_;
}
inline void ResponseScan::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ResponseScan::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ResponseScan::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseScan::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* ResponseScan::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseScan::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string timestamp = 2;
inline bool ResponseScan::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseScan::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseScan::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseScan::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& ResponseScan::timestamp() const {
  return *timestamp_;
}
inline void ResponseScan::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void ResponseScan::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void ResponseScan::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseScan::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* ResponseScan::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseScan::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .message_scan.ResponseScan.ResponseGetBinaryValue response_get_binary_value = 3;
inline bool ResponseScan::has_response_get_binary_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseScan::set_has_response_get_binary_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseScan::clear_has_response_get_binary_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseScan::clear_response_get_binary_value() {
  if (response_get_binary_value_ != NULL) response_get_binary_value_->::message_scan::ResponseScan_ResponseGetBinaryValue::Clear();
  clear_has_response_get_binary_value();
}
inline const ::message_scan::ResponseScan_ResponseGetBinaryValue& ResponseScan::response_get_binary_value() const {
  return response_get_binary_value_ != NULL ? *response_get_binary_value_ : *default_instance_->response_get_binary_value_;
}
inline ::message_scan::ResponseScan_ResponseGetBinaryValue* ResponseScan::mutable_response_get_binary_value() {
  set_has_response_get_binary_value();
  if (response_get_binary_value_ == NULL) response_get_binary_value_ = new ::message_scan::ResponseScan_ResponseGetBinaryValue;
  return response_get_binary_value_;
}
inline ::message_scan::ResponseScan_ResponseGetBinaryValue* ResponseScan::release_response_get_binary_value() {
  clear_has_response_get_binary_value();
  ::message_scan::ResponseScan_ResponseGetBinaryValue* temp = response_get_binary_value_;
  response_get_binary_value_ = NULL;
  return temp;
}
inline void ResponseScan::set_allocated_response_get_binary_value(::message_scan::ResponseScan_ResponseGetBinaryValue* response_get_binary_value) {
  delete response_get_binary_value_;
  response_get_binary_value_ = response_get_binary_value;
  if (response_get_binary_value) {
    set_has_response_get_binary_value();
  } else {
    clear_has_response_get_binary_value();
  }
}

// optional .message_scan.ResponseScan.ResponseSetBinaryValue reponse_set_binary_value = 4;
inline bool ResponseScan::has_reponse_set_binary_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseScan::set_has_reponse_set_binary_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseScan::clear_has_reponse_set_binary_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseScan::clear_reponse_set_binary_value() {
  if (reponse_set_binary_value_ != NULL) reponse_set_binary_value_->::message_scan::ResponseScan_ResponseSetBinaryValue::Clear();
  clear_has_reponse_set_binary_value();
}
inline const ::message_scan::ResponseScan_ResponseSetBinaryValue& ResponseScan::reponse_set_binary_value() const {
  return reponse_set_binary_value_ != NULL ? *reponse_set_binary_value_ : *default_instance_->reponse_set_binary_value_;
}
inline ::message_scan::ResponseScan_ResponseSetBinaryValue* ResponseScan::mutable_reponse_set_binary_value() {
  set_has_reponse_set_binary_value();
  if (reponse_set_binary_value_ == NULL) reponse_set_binary_value_ = new ::message_scan::ResponseScan_ResponseSetBinaryValue;
  return reponse_set_binary_value_;
}
inline ::message_scan::ResponseScan_ResponseSetBinaryValue* ResponseScan::release_reponse_set_binary_value() {
  clear_has_reponse_set_binary_value();
  ::message_scan::ResponseScan_ResponseSetBinaryValue* temp = reponse_set_binary_value_;
  reponse_set_binary_value_ = NULL;
  return temp;
}
inline void ResponseScan::set_allocated_reponse_set_binary_value(::message_scan::ResponseScan_ResponseSetBinaryValue* reponse_set_binary_value) {
  delete reponse_set_binary_value_;
  reponse_set_binary_value_ = reponse_set_binary_value;
  if (reponse_set_binary_value) {
    set_has_reponse_set_binary_value();
  } else {
    clear_has_reponse_set_binary_value();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message_scan

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message_scan::RequestScan_EncodeType>() {
  return ::message_scan::RequestScan_EncodeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message_scan::RequestScan_FileType>() {
  return ::message_scan::RequestScan_FileType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message_scan::RequestScan_RequestType>() {
  return ::message_scan::RequestScan_RequestType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5fscan_2eproto__INCLUDED
