// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_scan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_scan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message_scan {

namespace {

const ::google::protobuf::Descriptor* RequestScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestScan_RequestGetBinaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestScan_RequestGetBinaryValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestScan_RequestSetBinaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestScan_RequestSetBinaryValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestScan_EncodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestScan_FileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestScan_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResponseScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseScan_ResponseGetBinaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseScan_ResponseGetBinaryValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseScan_ResponseSetBinaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseScan_ResponseSetBinaryValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseScan_EncodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseScan_FileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseScan_ResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fscan_2eproto() {
  protobuf_AddDesc_message_5fscan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_scan.proto");
  GOOGLE_CHECK(file != NULL);
  RequestScan_descriptor_ = file->message_type(0);
  static const int RequestScan_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, request_get_binary_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, request_set_binary_value_),
  };
  RequestScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestScan_descriptor_,
      RequestScan::default_instance_,
      RequestScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestScan));
  RequestScan_RequestGetBinaryValue_descriptor_ = RequestScan_descriptor_->nested_type(0);
  static const int RequestScan_RequestGetBinaryValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestGetBinaryValue, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestGetBinaryValue, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestGetBinaryValue, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestGetBinaryValue, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestGetBinaryValue, file_type_),
  };
  RequestScan_RequestGetBinaryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestScan_RequestGetBinaryValue_descriptor_,
      RequestScan_RequestGetBinaryValue::default_instance_,
      RequestScan_RequestGetBinaryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestGetBinaryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestGetBinaryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestScan_RequestGetBinaryValue));
  RequestScan_RequestSetBinaryValue_descriptor_ = RequestScan_descriptor_->nested_type(1);
  static const int RequestScan_RequestSetBinaryValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestSetBinaryValue, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestSetBinaryValue, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestSetBinaryValue, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestSetBinaryValue, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestSetBinaryValue, file_type_),
  };
  RequestScan_RequestSetBinaryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestScan_RequestSetBinaryValue_descriptor_,
      RequestScan_RequestSetBinaryValue::default_instance_,
      RequestScan_RequestSetBinaryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestSetBinaryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_RequestSetBinaryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestScan_RequestSetBinaryValue));
  RequestScan_EncodeType_descriptor_ = RequestScan_descriptor_->enum_type(0);
  RequestScan_FileType_descriptor_ = RequestScan_descriptor_->enum_type(1);
  RequestScan_RequestType_descriptor_ = RequestScan_descriptor_->enum_type(2);
  ResponseScan_descriptor_ = file->message_type(1);
  static const int ResponseScan_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, response_get_binary_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, reponse_set_binary_value_),
  };
  ResponseScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseScan_descriptor_,
      ResponseScan::default_instance_,
      ResponseScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseScan));
  ResponseScan_ResponseGetBinaryValue_descriptor_ = ResponseScan_descriptor_->nested_type(0);
  static const int ResponseScan_ResponseGetBinaryValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseGetBinaryValue, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseGetBinaryValue, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseGetBinaryValue, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseGetBinaryValue, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseGetBinaryValue, file_type_),
  };
  ResponseScan_ResponseGetBinaryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseScan_ResponseGetBinaryValue_descriptor_,
      ResponseScan_ResponseGetBinaryValue::default_instance_,
      ResponseScan_ResponseGetBinaryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseGetBinaryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseGetBinaryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseScan_ResponseGetBinaryValue));
  ResponseScan_ResponseSetBinaryValue_descriptor_ = ResponseScan_descriptor_->nested_type(1);
  static const int ResponseScan_ResponseSetBinaryValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseSetBinaryValue, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseSetBinaryValue, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseSetBinaryValue, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseSetBinaryValue, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseSetBinaryValue, file_type_),
  };
  ResponseScan_ResponseSetBinaryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseScan_ResponseSetBinaryValue_descriptor_,
      ResponseScan_ResponseSetBinaryValue::default_instance_,
      ResponseScan_ResponseSetBinaryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseSetBinaryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_ResponseSetBinaryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseScan_ResponseSetBinaryValue));
  ResponseScan_EncodeType_descriptor_ = ResponseScan_descriptor_->enum_type(0);
  ResponseScan_FileType_descriptor_ = ResponseScan_descriptor_->enum_type(1);
  ResponseScan_ResponseType_descriptor_ = ResponseScan_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fscan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestScan_descriptor_, &RequestScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestScan_RequestGetBinaryValue_descriptor_, &RequestScan_RequestGetBinaryValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestScan_RequestSetBinaryValue_descriptor_, &RequestScan_RequestSetBinaryValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseScan_descriptor_, &ResponseScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseScan_ResponseGetBinaryValue_descriptor_, &ResponseScan_ResponseGetBinaryValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseScan_ResponseSetBinaryValue_descriptor_, &ResponseScan_ResponseSetBinaryValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fscan_2eproto() {
  delete RequestScan::default_instance_;
  delete RequestScan_reflection_;
  delete RequestScan_RequestGetBinaryValue::default_instance_;
  delete RequestScan_RequestGetBinaryValue_reflection_;
  delete RequestScan_RequestSetBinaryValue::default_instance_;
  delete RequestScan_RequestSetBinaryValue_reflection_;
  delete ResponseScan::default_instance_;
  delete ResponseScan_reflection_;
  delete ResponseScan_ResponseGetBinaryValue::default_instance_;
  delete ResponseScan_ResponseGetBinaryValue_reflection_;
  delete ResponseScan_ResponseSetBinaryValue::default_instance_;
  delete ResponseScan_ResponseSetBinaryValue_reflection_;
}

void protobuf_AddDesc_message_5fscan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022message_scan.proto\022\014message_scan\"\252\007\n\013R"
    "equestScan\0223\n\004type\030\001 \002(\0162%.message_scan."
    "RequestScan.RequestType\022\014\n\004uuid\030\002 \002(\014\022\021\n"
    "\ttimestamp\030\003 \002(\014\022Q\n\030request_get_binary_v"
    "alue\030\004 \003(\0132/.message_scan.RequestScan.Re"
    "questGetBinaryValue\022Q\n\030request_set_binar"
    "y_value\030\005 \003(\0132/.message_scan.RequestScan"
    ".RequestSetBinaryValue\032\275\001\n\025RequestGetBin"
    "aryValue\022\016\n\006binary\030\001 \001(\014\022\021\n\tfile_name\030\002 "
    "\001(\014\022\021\n\tfile_size\030\003 \001(\004\0227\n\tscan_type\030\004 \001("
    "\0162$.message_scan.RequestScan.EncodeType\022"
    "5\n\tfile_type\030\005 \001(\0162\".message_scan.Reques"
    "tScan.FileType\032\275\001\n\025RequestSetBinaryValue"
    "\022\016\n\006binary\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\014\022\021\n\tf"
    "ile_size\030\003 \001(\004\0227\n\tscan_type\030\004 \001(\0162$.mess"
    "age_scan.RequestScan.EncodeType\0225\n\tfile_"
    "type\030\005 \001(\0162\".message_scan.RequestScan.Fi"
    "leType\"W\n\nEncodeType\022\007\n\003MD5\020\001\022\016\n\nMD5_HEA"
    "DER\020\002\022\014\n\010MD5_BODY\020\003\022\t\n\005SHA_1\020\004\022\013\n\007SHA_25"
    "6\020\005\022\n\n\006SSDEEP\020\006\"(\n\010FileType\022\006\n\002PE\020\001\022\007\n\003E"
    "LF\020\002\022\013\n\007PROCESS\020\003\"\233\001\n\013RequestType\022\014\n\010REG"
    "ISTER\020\001\022\024\n\020REGISTER_SUCCESS\020\002\022\026\n\022REGISTE"
    "R_UNSUCCESS\020\003\022\010\n\004SCAN\020\004\022\020\n\014SCAN_SUCCESS\020"
    "\005\022\022\n\016SCAN_UNSUCCESS\020\006\022\n\n\006RESULT\020\007\022\024\n\020CLO"
    "SE_CONNECTION\020\010\"\271\007\n\014ResponseScan\0225\n\004type"
    "\030\001 \002(\0162\'.message_scan.ResponseScan.Respo"
    "nseType\022\014\n\004uuid\030\002 \002(\014\022\021\n\ttimestamp\030\003 \002(\014"
    "\022T\n\031response_get_binary_value\030\004 \003(\01321.me"
    "ssage_scan.ResponseScan.ResponseGetBinar"
    "yValue\022S\n\030reponse_set_binary_value\030\005 \003(\013"
    "21.message_scan.ResponseScan.ResponseSet"
    "BinaryValue\032\300\001\n\026ResponseGetBinaryValue\022\016"
    "\n\006binary\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\014\022\021\n\tfil"
    "e_size\030\003 \001(\004\0228\n\tscan_type\030\004 \001(\0162%.messag"
    "e_scan.ResponseScan.EncodeType\0226\n\tfile_t"
    "ype\030\005 \001(\0162#.message_scan.ResponseScan.Fi"
    "leType\032\300\001\n\026ResponseSetBinaryValue\022\016\n\006bin"
    "ary\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\014\022\021\n\tfile_siz"
    "e\030\003 \001(\004\0228\n\tscan_type\030\004 \001(\0162%.message_sca"
    "n.ResponseScan.EncodeType\0226\n\tfile_type\030\005"
    " \001(\0162#.message_scan.ResponseScan.FileTyp"
    "e\"W\n\nEncodeType\022\007\n\003MD5\020\001\022\016\n\nMD5_HEADER\020\002"
    "\022\014\n\010MD5_BODY\020\003\022\t\n\005SHA_1\020\004\022\013\n\007SHA_256\020\005\022\n"
    "\n\006SSDEEP\020\006\"(\n\010FileType\022\006\n\002PE\020\001\022\007\n\003ELF\020\002\022"
    "\013\n\007PROCESS\020\003\"\234\001\n\014ResponseType\022\014\n\010REGISTE"
    "R\020\001\022\024\n\020REGISTER_SUCCESS\020\002\022\026\n\022REGISTER_UN"
    "SUCCESS\020\003\022\010\n\004SCAN\020\004\022\020\n\014SCAN_SUCCESS\020\005\022\022\n"
    "\016SCAN_UNSUCCESS\020\006\022\n\n\006RESULT\020\007\022\024\n\020CLOSE_C"
    "ONNECTION\020\010", 1931);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_scan.proto", &protobuf_RegisterTypes);
  RequestScan::default_instance_ = new RequestScan();
  RequestScan_RequestGetBinaryValue::default_instance_ = new RequestScan_RequestGetBinaryValue();
  RequestScan_RequestSetBinaryValue::default_instance_ = new RequestScan_RequestSetBinaryValue();
  ResponseScan::default_instance_ = new ResponseScan();
  ResponseScan_ResponseGetBinaryValue::default_instance_ = new ResponseScan_ResponseGetBinaryValue();
  ResponseScan_ResponseSetBinaryValue::default_instance_ = new ResponseScan_ResponseSetBinaryValue();
  RequestScan::default_instance_->InitAsDefaultInstance();
  RequestScan_RequestGetBinaryValue::default_instance_->InitAsDefaultInstance();
  RequestScan_RequestSetBinaryValue::default_instance_->InitAsDefaultInstance();
  ResponseScan::default_instance_->InitAsDefaultInstance();
  ResponseScan_ResponseGetBinaryValue::default_instance_->InitAsDefaultInstance();
  ResponseScan_ResponseSetBinaryValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fscan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fscan_2eproto {
  StaticDescriptorInitializer_message_5fscan_2eproto() {
    protobuf_AddDesc_message_5fscan_2eproto();
  }
} static_descriptor_initializer_message_5fscan_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestScan_EncodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_EncodeType_descriptor_;
}
bool RequestScan_EncodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestScan_EncodeType RequestScan::MD5;
const RequestScan_EncodeType RequestScan::MD5_HEADER;
const RequestScan_EncodeType RequestScan::MD5_BODY;
const RequestScan_EncodeType RequestScan::SHA_1;
const RequestScan_EncodeType RequestScan::SHA_256;
const RequestScan_EncodeType RequestScan::SSDEEP;
const RequestScan_EncodeType RequestScan::EncodeType_MIN;
const RequestScan_EncodeType RequestScan::EncodeType_MAX;
const int RequestScan::EncodeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RequestScan_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_FileType_descriptor_;
}
bool RequestScan_FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestScan_FileType RequestScan::PE;
const RequestScan_FileType RequestScan::ELF;
const RequestScan_FileType RequestScan::PROCESS;
const RequestScan_FileType RequestScan::FileType_MIN;
const RequestScan_FileType RequestScan::FileType_MAX;
const int RequestScan::FileType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RequestScan_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_RequestType_descriptor_;
}
bool RequestScan_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestScan_RequestType RequestScan::REGISTER;
const RequestScan_RequestType RequestScan::REGISTER_SUCCESS;
const RequestScan_RequestType RequestScan::REGISTER_UNSUCCESS;
const RequestScan_RequestType RequestScan::SCAN;
const RequestScan_RequestType RequestScan::SCAN_SUCCESS;
const RequestScan_RequestType RequestScan::SCAN_UNSUCCESS;
const RequestScan_RequestType RequestScan::RESULT;
const RequestScan_RequestType RequestScan::CLOSE_CONNECTION;
const RequestScan_RequestType RequestScan::RequestType_MIN;
const RequestScan_RequestType RequestScan::RequestType_MAX;
const int RequestScan::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestScan_RequestGetBinaryValue::kBinaryFieldNumber;
const int RequestScan_RequestGetBinaryValue::kFileNameFieldNumber;
const int RequestScan_RequestGetBinaryValue::kFileSizeFieldNumber;
const int RequestScan_RequestGetBinaryValue::kScanTypeFieldNumber;
const int RequestScan_RequestGetBinaryValue::kFileTypeFieldNumber;
#endif  // !_MSC_VER

RequestScan_RequestGetBinaryValue::RequestScan_RequestGetBinaryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestScan_RequestGetBinaryValue::InitAsDefaultInstance() {
}

RequestScan_RequestGetBinaryValue::RequestScan_RequestGetBinaryValue(const RequestScan_RequestGetBinaryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestScan_RequestGetBinaryValue::SharedCtor() {
  _cached_size_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  scan_type_ = 1;
  file_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestScan_RequestGetBinaryValue::~RequestScan_RequestGetBinaryValue() {
  SharedDtor();
}

void RequestScan_RequestGetBinaryValue::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void RequestScan_RequestGetBinaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestScan_RequestGetBinaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_RequestGetBinaryValue_descriptor_;
}

const RequestScan_RequestGetBinaryValue& RequestScan_RequestGetBinaryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

RequestScan_RequestGetBinaryValue* RequestScan_RequestGetBinaryValue::default_instance_ = NULL;

RequestScan_RequestGetBinaryValue* RequestScan_RequestGetBinaryValue::New() const {
  return new RequestScan_RequestGetBinaryValue;
}

void RequestScan_RequestGetBinaryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    scan_type_ = 1;
    file_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestScan_RequestGetBinaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_type;
        break;
      }

      // optional .message_scan.RequestScan.EncodeType scan_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_EncodeType_IsValid(value)) {
            set_scan_type(static_cast< ::message_scan::RequestScan_EncodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // optional .message_scan.RequestScan.FileType file_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_FileType_IsValid(value)) {
            set_file_type(static_cast< ::message_scan::RequestScan_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestScan_RequestGetBinaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binary(), output);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_type(), output);
  }

  // optional .message_scan.RequestScan.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestScan_RequestGetBinaryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary(), target);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_type(), target);
  }

  // optional .message_scan.RequestScan.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestScan_RequestGetBinaryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes binary = 1;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional .message_scan.RequestScan.EncodeType scan_type = 4;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_type());
    }

    // optional .message_scan.RequestScan.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestScan_RequestGetBinaryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestScan_RequestGetBinaryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestScan_RequestGetBinaryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestScan_RequestGetBinaryValue::MergeFrom(const RequestScan_RequestGetBinaryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestScan_RequestGetBinaryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestScan_RequestGetBinaryValue::CopyFrom(const RequestScan_RequestGetBinaryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestScan_RequestGetBinaryValue::IsInitialized() const {

  return true;
}

void RequestScan_RequestGetBinaryValue::Swap(RequestScan_RequestGetBinaryValue* other) {
  if (other != this) {
    std::swap(binary_, other->binary_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(file_type_, other->file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestScan_RequestGetBinaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestScan_RequestGetBinaryValue_descriptor_;
  metadata.reflection = RequestScan_RequestGetBinaryValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RequestScan_RequestSetBinaryValue::kBinaryFieldNumber;
const int RequestScan_RequestSetBinaryValue::kFileNameFieldNumber;
const int RequestScan_RequestSetBinaryValue::kFileSizeFieldNumber;
const int RequestScan_RequestSetBinaryValue::kScanTypeFieldNumber;
const int RequestScan_RequestSetBinaryValue::kFileTypeFieldNumber;
#endif  // !_MSC_VER

RequestScan_RequestSetBinaryValue::RequestScan_RequestSetBinaryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestScan_RequestSetBinaryValue::InitAsDefaultInstance() {
}

RequestScan_RequestSetBinaryValue::RequestScan_RequestSetBinaryValue(const RequestScan_RequestSetBinaryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestScan_RequestSetBinaryValue::SharedCtor() {
  _cached_size_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  scan_type_ = 1;
  file_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestScan_RequestSetBinaryValue::~RequestScan_RequestSetBinaryValue() {
  SharedDtor();
}

void RequestScan_RequestSetBinaryValue::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void RequestScan_RequestSetBinaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestScan_RequestSetBinaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_RequestSetBinaryValue_descriptor_;
}

const RequestScan_RequestSetBinaryValue& RequestScan_RequestSetBinaryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

RequestScan_RequestSetBinaryValue* RequestScan_RequestSetBinaryValue::default_instance_ = NULL;

RequestScan_RequestSetBinaryValue* RequestScan_RequestSetBinaryValue::New() const {
  return new RequestScan_RequestSetBinaryValue;
}

void RequestScan_RequestSetBinaryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    scan_type_ = 1;
    file_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestScan_RequestSetBinaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_type;
        break;
      }

      // optional .message_scan.RequestScan.EncodeType scan_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_EncodeType_IsValid(value)) {
            set_scan_type(static_cast< ::message_scan::RequestScan_EncodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // optional .message_scan.RequestScan.FileType file_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_FileType_IsValid(value)) {
            set_file_type(static_cast< ::message_scan::RequestScan_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestScan_RequestSetBinaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binary(), output);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_type(), output);
  }

  // optional .message_scan.RequestScan.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestScan_RequestSetBinaryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary(), target);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_type(), target);
  }

  // optional .message_scan.RequestScan.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestScan_RequestSetBinaryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes binary = 1;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional .message_scan.RequestScan.EncodeType scan_type = 4;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_type());
    }

    // optional .message_scan.RequestScan.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestScan_RequestSetBinaryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestScan_RequestSetBinaryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestScan_RequestSetBinaryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestScan_RequestSetBinaryValue::MergeFrom(const RequestScan_RequestSetBinaryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestScan_RequestSetBinaryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestScan_RequestSetBinaryValue::CopyFrom(const RequestScan_RequestSetBinaryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestScan_RequestSetBinaryValue::IsInitialized() const {

  return true;
}

void RequestScan_RequestSetBinaryValue::Swap(RequestScan_RequestSetBinaryValue* other) {
  if (other != this) {
    std::swap(binary_, other->binary_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(file_type_, other->file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestScan_RequestSetBinaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestScan_RequestSetBinaryValue_descriptor_;
  metadata.reflection = RequestScan_RequestSetBinaryValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RequestScan::kTypeFieldNumber;
const int RequestScan::kUuidFieldNumber;
const int RequestScan::kTimestampFieldNumber;
const int RequestScan::kRequestGetBinaryValueFieldNumber;
const int RequestScan::kRequestSetBinaryValueFieldNumber;
#endif  // !_MSC_VER

RequestScan::RequestScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestScan::InitAsDefaultInstance() {
}

RequestScan::RequestScan(const RequestScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestScan::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestScan::~RequestScan() {
  SharedDtor();
}

void RequestScan::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void RequestScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_descriptor_;
}

const RequestScan& RequestScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

RequestScan* RequestScan::default_instance_ = NULL;

RequestScan* RequestScan::New() const {
  return new RequestScan;
}

void RequestScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  request_get_binary_value_.Clear();
  request_set_binary_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message_scan.RequestScan.RequestType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_RequestType_IsValid(value)) {
            set_type(static_cast< ::message_scan::RequestScan_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // required bytes uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required bytes timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request_get_binary_value;
        break;
      }

      // repeated .message_scan.RequestScan.RequestGetBinaryValue request_get_binary_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_get_binary_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_get_binary_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request_get_binary_value;
        if (input->ExpectTag(42)) goto parse_request_set_binary_value;
        break;
      }

      // repeated .message_scan.RequestScan.RequestSetBinaryValue request_set_binary_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_set_binary_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_set_binary_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_request_set_binary_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message_scan.RequestScan.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uuid(), output);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->timestamp(), output);
  }

  // repeated .message_scan.RequestScan.RequestGetBinaryValue request_get_binary_value = 4;
  for (int i = 0; i < this->request_get_binary_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request_get_binary_value(i), output);
  }

  // repeated .message_scan.RequestScan.RequestSetBinaryValue request_set_binary_value = 5;
  for (int i = 0; i < this->request_set_binary_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->request_set_binary_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .message_scan.RequestScan.RequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->timestamp(), target);
  }

  // repeated .message_scan.RequestScan.RequestGetBinaryValue request_get_binary_value = 4;
  for (int i = 0; i < this->request_get_binary_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request_get_binary_value(i), target);
  }

  // repeated .message_scan.RequestScan.RequestSetBinaryValue request_set_binary_value = 5;
  for (int i = 0; i < this->request_set_binary_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->request_set_binary_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message_scan.RequestScan.RequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // required bytes timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp());
    }

  }
  // repeated .message_scan.RequestScan.RequestGetBinaryValue request_get_binary_value = 4;
  total_size += 1 * this->request_get_binary_value_size();
  for (int i = 0; i < this->request_get_binary_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->request_get_binary_value(i));
  }

  // repeated .message_scan.RequestScan.RequestSetBinaryValue request_set_binary_value = 5;
  total_size += 1 * this->request_set_binary_value_size();
  for (int i = 0; i < this->request_set_binary_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->request_set_binary_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestScan::MergeFrom(const RequestScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  request_get_binary_value_.MergeFrom(from.request_get_binary_value_);
  request_set_binary_value_.MergeFrom(from.request_set_binary_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestScan::CopyFrom(const RequestScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestScan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestScan::Swap(RequestScan* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(timestamp_, other->timestamp_);
    request_get_binary_value_.Swap(&other->request_get_binary_value_);
    request_set_binary_value_.Swap(&other->request_set_binary_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestScan_descriptor_;
  metadata.reflection = RequestScan_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseScan_EncodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_EncodeType_descriptor_;
}
bool ResponseScan_EncodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseScan_EncodeType ResponseScan::MD5;
const ResponseScan_EncodeType ResponseScan::MD5_HEADER;
const ResponseScan_EncodeType ResponseScan::MD5_BODY;
const ResponseScan_EncodeType ResponseScan::SHA_1;
const ResponseScan_EncodeType ResponseScan::SHA_256;
const ResponseScan_EncodeType ResponseScan::SSDEEP;
const ResponseScan_EncodeType ResponseScan::EncodeType_MIN;
const ResponseScan_EncodeType ResponseScan::EncodeType_MAX;
const int ResponseScan::EncodeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResponseScan_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_FileType_descriptor_;
}
bool ResponseScan_FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseScan_FileType ResponseScan::PE;
const ResponseScan_FileType ResponseScan::ELF;
const ResponseScan_FileType ResponseScan::PROCESS;
const ResponseScan_FileType ResponseScan::FileType_MIN;
const ResponseScan_FileType ResponseScan::FileType_MAX;
const int ResponseScan::FileType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResponseScan_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_ResponseType_descriptor_;
}
bool ResponseScan_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseScan_ResponseType ResponseScan::REGISTER;
const ResponseScan_ResponseType ResponseScan::REGISTER_SUCCESS;
const ResponseScan_ResponseType ResponseScan::REGISTER_UNSUCCESS;
const ResponseScan_ResponseType ResponseScan::SCAN;
const ResponseScan_ResponseType ResponseScan::SCAN_SUCCESS;
const ResponseScan_ResponseType ResponseScan::SCAN_UNSUCCESS;
const ResponseScan_ResponseType ResponseScan::RESULT;
const ResponseScan_ResponseType ResponseScan::CLOSE_CONNECTION;
const ResponseScan_ResponseType ResponseScan::ResponseType_MIN;
const ResponseScan_ResponseType ResponseScan::ResponseType_MAX;
const int ResponseScan::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResponseScan_ResponseGetBinaryValue::kBinaryFieldNumber;
const int ResponseScan_ResponseGetBinaryValue::kFileNameFieldNumber;
const int ResponseScan_ResponseGetBinaryValue::kFileSizeFieldNumber;
const int ResponseScan_ResponseGetBinaryValue::kScanTypeFieldNumber;
const int ResponseScan_ResponseGetBinaryValue::kFileTypeFieldNumber;
#endif  // !_MSC_VER

ResponseScan_ResponseGetBinaryValue::ResponseScan_ResponseGetBinaryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseScan_ResponseGetBinaryValue::InitAsDefaultInstance() {
}

ResponseScan_ResponseGetBinaryValue::ResponseScan_ResponseGetBinaryValue(const ResponseScan_ResponseGetBinaryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseScan_ResponseGetBinaryValue::SharedCtor() {
  _cached_size_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  scan_type_ = 1;
  file_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseScan_ResponseGetBinaryValue::~ResponseScan_ResponseGetBinaryValue() {
  SharedDtor();
}

void ResponseScan_ResponseGetBinaryValue::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void ResponseScan_ResponseGetBinaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseScan_ResponseGetBinaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_ResponseGetBinaryValue_descriptor_;
}

const ResponseScan_ResponseGetBinaryValue& ResponseScan_ResponseGetBinaryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

ResponseScan_ResponseGetBinaryValue* ResponseScan_ResponseGetBinaryValue::default_instance_ = NULL;

ResponseScan_ResponseGetBinaryValue* ResponseScan_ResponseGetBinaryValue::New() const {
  return new ResponseScan_ResponseGetBinaryValue;
}

void ResponseScan_ResponseGetBinaryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    scan_type_ = 1;
    file_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseScan_ResponseGetBinaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_type;
        break;
      }

      // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_EncodeType_IsValid(value)) {
            set_scan_type(static_cast< ::message_scan::ResponseScan_EncodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // optional .message_scan.ResponseScan.FileType file_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_FileType_IsValid(value)) {
            set_file_type(static_cast< ::message_scan::ResponseScan_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseScan_ResponseGetBinaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binary(), output);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_type(), output);
  }

  // optional .message_scan.ResponseScan.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseScan_ResponseGetBinaryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary(), target);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_type(), target);
  }

  // optional .message_scan.ResponseScan.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseScan_ResponseGetBinaryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes binary = 1;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_type());
    }

    // optional .message_scan.ResponseScan.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseScan_ResponseGetBinaryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseScan_ResponseGetBinaryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseScan_ResponseGetBinaryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseScan_ResponseGetBinaryValue::MergeFrom(const ResponseScan_ResponseGetBinaryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseScan_ResponseGetBinaryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseScan_ResponseGetBinaryValue::CopyFrom(const ResponseScan_ResponseGetBinaryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseScan_ResponseGetBinaryValue::IsInitialized() const {

  return true;
}

void ResponseScan_ResponseGetBinaryValue::Swap(ResponseScan_ResponseGetBinaryValue* other) {
  if (other != this) {
    std::swap(binary_, other->binary_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(file_type_, other->file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseScan_ResponseGetBinaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseScan_ResponseGetBinaryValue_descriptor_;
  metadata.reflection = ResponseScan_ResponseGetBinaryValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResponseScan_ResponseSetBinaryValue::kBinaryFieldNumber;
const int ResponseScan_ResponseSetBinaryValue::kFileNameFieldNumber;
const int ResponseScan_ResponseSetBinaryValue::kFileSizeFieldNumber;
const int ResponseScan_ResponseSetBinaryValue::kScanTypeFieldNumber;
const int ResponseScan_ResponseSetBinaryValue::kFileTypeFieldNumber;
#endif  // !_MSC_VER

ResponseScan_ResponseSetBinaryValue::ResponseScan_ResponseSetBinaryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseScan_ResponseSetBinaryValue::InitAsDefaultInstance() {
}

ResponseScan_ResponseSetBinaryValue::ResponseScan_ResponseSetBinaryValue(const ResponseScan_ResponseSetBinaryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseScan_ResponseSetBinaryValue::SharedCtor() {
  _cached_size_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  scan_type_ = 1;
  file_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseScan_ResponseSetBinaryValue::~ResponseScan_ResponseSetBinaryValue() {
  SharedDtor();
}

void ResponseScan_ResponseSetBinaryValue::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void ResponseScan_ResponseSetBinaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseScan_ResponseSetBinaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_ResponseSetBinaryValue_descriptor_;
}

const ResponseScan_ResponseSetBinaryValue& ResponseScan_ResponseSetBinaryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

ResponseScan_ResponseSetBinaryValue* ResponseScan_ResponseSetBinaryValue::default_instance_ = NULL;

ResponseScan_ResponseSetBinaryValue* ResponseScan_ResponseSetBinaryValue::New() const {
  return new ResponseScan_ResponseSetBinaryValue;
}

void ResponseScan_ResponseSetBinaryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    scan_type_ = 1;
    file_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseScan_ResponseSetBinaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_type;
        break;
      }

      // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_EncodeType_IsValid(value)) {
            set_scan_type(static_cast< ::message_scan::ResponseScan_EncodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // optional .message_scan.ResponseScan.FileType file_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_FileType_IsValid(value)) {
            set_file_type(static_cast< ::message_scan::ResponseScan_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseScan_ResponseSetBinaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binary(), output);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_type(), output);
  }

  // optional .message_scan.ResponseScan.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseScan_ResponseSetBinaryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary(), target);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_type(), target);
  }

  // optional .message_scan.ResponseScan.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseScan_ResponseSetBinaryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes binary = 1;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_type());
    }

    // optional .message_scan.ResponseScan.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseScan_ResponseSetBinaryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseScan_ResponseSetBinaryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseScan_ResponseSetBinaryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseScan_ResponseSetBinaryValue::MergeFrom(const ResponseScan_ResponseSetBinaryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseScan_ResponseSetBinaryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseScan_ResponseSetBinaryValue::CopyFrom(const ResponseScan_ResponseSetBinaryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseScan_ResponseSetBinaryValue::IsInitialized() const {

  return true;
}

void ResponseScan_ResponseSetBinaryValue::Swap(ResponseScan_ResponseSetBinaryValue* other) {
  if (other != this) {
    std::swap(binary_, other->binary_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(file_type_, other->file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseScan_ResponseSetBinaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseScan_ResponseSetBinaryValue_descriptor_;
  metadata.reflection = ResponseScan_ResponseSetBinaryValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResponseScan::kTypeFieldNumber;
const int ResponseScan::kUuidFieldNumber;
const int ResponseScan::kTimestampFieldNumber;
const int ResponseScan::kResponseGetBinaryValueFieldNumber;
const int ResponseScan::kReponseSetBinaryValueFieldNumber;
#endif  // !_MSC_VER

ResponseScan::ResponseScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseScan::InitAsDefaultInstance() {
}

ResponseScan::ResponseScan(const ResponseScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseScan::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseScan::~ResponseScan() {
  SharedDtor();
}

void ResponseScan::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void ResponseScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_descriptor_;
}

const ResponseScan& ResponseScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

ResponseScan* ResponseScan::default_instance_ = NULL;

ResponseScan* ResponseScan::New() const {
  return new ResponseScan;
}

void ResponseScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  response_get_binary_value_.Clear();
  reponse_set_binary_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message_scan.ResponseScan.ResponseType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_ResponseType_IsValid(value)) {
            set_type(static_cast< ::message_scan::ResponseScan_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // required bytes uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required bytes timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_response_get_binary_value;
        break;
      }

      // repeated .message_scan.ResponseScan.ResponseGetBinaryValue response_get_binary_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_get_binary_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response_get_binary_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_response_get_binary_value;
        if (input->ExpectTag(42)) goto parse_reponse_set_binary_value;
        break;
      }

      // repeated .message_scan.ResponseScan.ResponseSetBinaryValue reponse_set_binary_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reponse_set_binary_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reponse_set_binary_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reponse_set_binary_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message_scan.ResponseScan.ResponseType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uuid(), output);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->timestamp(), output);
  }

  // repeated .message_scan.ResponseScan.ResponseGetBinaryValue response_get_binary_value = 4;
  for (int i = 0; i < this->response_get_binary_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->response_get_binary_value(i), output);
  }

  // repeated .message_scan.ResponseScan.ResponseSetBinaryValue reponse_set_binary_value = 5;
  for (int i = 0; i < this->reponse_set_binary_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reponse_set_binary_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .message_scan.ResponseScan.ResponseType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->timestamp(), target);
  }

  // repeated .message_scan.ResponseScan.ResponseGetBinaryValue response_get_binary_value = 4;
  for (int i = 0; i < this->response_get_binary_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->response_get_binary_value(i), target);
  }

  // repeated .message_scan.ResponseScan.ResponseSetBinaryValue reponse_set_binary_value = 5;
  for (int i = 0; i < this->reponse_set_binary_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reponse_set_binary_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message_scan.ResponseScan.ResponseType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // required bytes timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp());
    }

  }
  // repeated .message_scan.ResponseScan.ResponseGetBinaryValue response_get_binary_value = 4;
  total_size += 1 * this->response_get_binary_value_size();
  for (int i = 0; i < this->response_get_binary_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->response_get_binary_value(i));
  }

  // repeated .message_scan.ResponseScan.ResponseSetBinaryValue reponse_set_binary_value = 5;
  total_size += 1 * this->reponse_set_binary_value_size();
  for (int i = 0; i < this->reponse_set_binary_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reponse_set_binary_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseScan::MergeFrom(const ResponseScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  response_get_binary_value_.MergeFrom(from.response_get_binary_value_);
  reponse_set_binary_value_.MergeFrom(from.reponse_set_binary_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseScan::CopyFrom(const ResponseScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseScan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ResponseScan::Swap(ResponseScan* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(timestamp_, other->timestamp_);
    response_get_binary_value_.Swap(&other->response_get_binary_value_);
    reponse_set_binary_value_.Swap(&other->reponse_set_binary_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseScan_descriptor_;
  metadata.reflection = ResponseScan_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message_scan

// @@protoc_insertion_point(global_scope)
