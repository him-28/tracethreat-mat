// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_scan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_scan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message_scan {

namespace {

const ::google::protobuf::Descriptor* RequestScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestScan_GetBinaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestScan_GetBinaryValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestScan_SetBinaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestScan_SetBinaryValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestScan_EncodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestScan_FileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestScan_RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestScan_FileStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResponseScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseScan_GetBinaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseScan_GetBinaryValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseScan_SetBinaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseScan_SetBinaryValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseScan_EncodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseScan_FileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseScan_ResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseScan_FileStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fscan_2eproto() {
  protobuf_AddDesc_message_5fscan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_scan.proto");
  GOOGLE_CHECK(file != NULL);
  RequestScan_descriptor_ = file->message_type(0);
  static const int RequestScan_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, conn_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, conn_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, get_binary_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, set_binary_value_),
  };
  RequestScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestScan_descriptor_,
      RequestScan::default_instance_,
      RequestScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestScan));
  RequestScan_GetBinaryValue_descriptor_ = RequestScan_descriptor_->nested_type(0);
  static const int RequestScan_GetBinaryValue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_GetBinaryValue, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_GetBinaryValue, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_GetBinaryValue, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_GetBinaryValue, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_GetBinaryValue, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_GetBinaryValue, file_status_),
  };
  RequestScan_GetBinaryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestScan_GetBinaryValue_descriptor_,
      RequestScan_GetBinaryValue::default_instance_,
      RequestScan_GetBinaryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_GetBinaryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_GetBinaryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestScan_GetBinaryValue));
  RequestScan_SetBinaryValue_descriptor_ = RequestScan_descriptor_->nested_type(1);
  static const int RequestScan_SetBinaryValue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_SetBinaryValue, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_SetBinaryValue, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_SetBinaryValue, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_SetBinaryValue, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_SetBinaryValue, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_SetBinaryValue, file_status_),
  };
  RequestScan_SetBinaryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestScan_SetBinaryValue_descriptor_,
      RequestScan_SetBinaryValue::default_instance_,
      RequestScan_SetBinaryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_SetBinaryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScan_SetBinaryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestScan_SetBinaryValue));
  RequestScan_EncodeType_descriptor_ = RequestScan_descriptor_->enum_type(0);
  RequestScan_FileType_descriptor_ = RequestScan_descriptor_->enum_type(1);
  RequestScan_RequestType_descriptor_ = RequestScan_descriptor_->enum_type(2);
  RequestScan_FileStatus_descriptor_ = RequestScan_descriptor_->enum_type(3);
  ResponseScan_descriptor_ = file->message_type(1);
  static const int ResponseScan_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, conn_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, conn_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, get_binary_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, set_binary_value_),
  };
  ResponseScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseScan_descriptor_,
      ResponseScan::default_instance_,
      ResponseScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseScan));
  ResponseScan_GetBinaryValue_descriptor_ = ResponseScan_descriptor_->nested_type(0);
  static const int ResponseScan_GetBinaryValue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_GetBinaryValue, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_GetBinaryValue, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_GetBinaryValue, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_GetBinaryValue, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_GetBinaryValue, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_GetBinaryValue, file_status_),
  };
  ResponseScan_GetBinaryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseScan_GetBinaryValue_descriptor_,
      ResponseScan_GetBinaryValue::default_instance_,
      ResponseScan_GetBinaryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_GetBinaryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_GetBinaryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseScan_GetBinaryValue));
  ResponseScan_SetBinaryValue_descriptor_ = ResponseScan_descriptor_->nested_type(1);
  static const int ResponseScan_SetBinaryValue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_SetBinaryValue, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_SetBinaryValue, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_SetBinaryValue, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_SetBinaryValue, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_SetBinaryValue, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_SetBinaryValue, file_status_),
  };
  ResponseScan_SetBinaryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseScan_SetBinaryValue_descriptor_,
      ResponseScan_SetBinaryValue::default_instance_,
      ResponseScan_SetBinaryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_SetBinaryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseScan_SetBinaryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseScan_SetBinaryValue));
  ResponseScan_EncodeType_descriptor_ = ResponseScan_descriptor_->enum_type(0);
  ResponseScan_FileType_descriptor_ = ResponseScan_descriptor_->enum_type(1);
  ResponseScan_ResponseType_descriptor_ = ResponseScan_descriptor_->enum_type(2);
  ResponseScan_FileStatus_descriptor_ = ResponseScan_descriptor_->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fscan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestScan_descriptor_, &RequestScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestScan_GetBinaryValue_descriptor_, &RequestScan_GetBinaryValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestScan_SetBinaryValue_descriptor_, &RequestScan_SetBinaryValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseScan_descriptor_, &ResponseScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseScan_GetBinaryValue_descriptor_, &ResponseScan_GetBinaryValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseScan_SetBinaryValue_descriptor_, &ResponseScan_SetBinaryValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fscan_2eproto() {
  delete RequestScan::default_instance_;
  delete RequestScan_reflection_;
  delete RequestScan_GetBinaryValue::default_instance_;
  delete RequestScan_GetBinaryValue_reflection_;
  delete RequestScan_SetBinaryValue::default_instance_;
  delete RequestScan_SetBinaryValue_reflection_;
  delete ResponseScan::default_instance_;
  delete ResponseScan_reflection_;
  delete ResponseScan_GetBinaryValue::default_instance_;
  delete ResponseScan_GetBinaryValue_reflection_;
  delete ResponseScan_SetBinaryValue::default_instance_;
  delete ResponseScan_SetBinaryValue_reflection_;
}

void protobuf_AddDesc_message_5fscan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022message_scan.proto\022\014message_scan\"\202\t\n\013R"
    "equestScan\0223\n\004type\030\001 \002(\0162%.message_scan."
    "RequestScan.RequestType\022\014\n\004uuid\030\002 \002(\014\022\021\n"
    "\ttimestamp\030\003 \002(\014\022\013\n\003key\030\004 \001(\014\022\n\n\002iv\030\005 \001("
    "\014\022\n\n\002ip\030\006 \002(\014\022\017\n\007conn_ip\030\007 \002(\014\022\021\n\tconn_u"
    "uid\030\010 \002(\014\022B\n\020get_binary_value\030\t \003(\0132(.me"
    "ssage_scan.RequestScan.GetBinaryValue\022B\n"
    "\020set_binary_value\030\n \003(\0132(.message_scan.R"
    "equestScan.SetBinaryValue\032\361\001\n\016GetBinaryV"
    "alue\022\016\n\006binary\030\001 \001(\014\022\021\n\tfile_name\030\002 \001(\014\022"
    "\021\n\tfile_size\030\003 \001(\004\0227\n\tscan_type\030\004 \001(\0162$."
    "message_scan.RequestScan.EncodeType\0225\n\tf"
    "ile_type\030\005 \001(\0162\".message_scan.RequestSca"
    "n.FileType\0229\n\013file_status\030\006 \001(\0162$.messag"
    "e_scan.RequestScan.FileStatus\032\361\001\n\016SetBin"
    "aryValue\022\016\n\006binary\030\001 \001(\014\022\021\n\tfile_name\030\002 "
    "\001(\014\022\021\n\tfile_size\030\003 \001(\004\0227\n\tscan_type\030\004 \001("
    "\0162$.message_scan.RequestScan.EncodeType\022"
    "5\n\tfile_type\030\005 \001(\0162\".message_scan.Reques"
    "tScan.FileType\0229\n\013file_status\030\006 \001(\0162$.me"
    "ssage_scan.RequestScan.FileStatus\"W\n\nEnc"
    "odeType\022\007\n\003MD5\020\001\022\016\n\nMD5_HEADER\020\002\022\014\n\010MD5_"
    "BODY\020\003\022\t\n\005SHA_1\020\004\022\013\n\007SHA_256\020\005\022\n\n\006SSDEEP"
    "\020\006\"(\n\010FileType\022\006\n\002PE\020\001\022\007\n\003ELF\020\002\022\013\n\007PROCE"
    "SS\020\003\"\233\001\n\013RequestType\022\014\n\010REGISTER\020\001\022\010\n\004SC"
    "AN\020\002\022\024\n\020CLOSE_CONNECTION\020\003\022\024\n\020REGISTER_S"
    "UCCESS\020\004\022\026\n\022REGISTER_UNSUCCESS\020\005\022\020\n\014SCAN"
    "_SUCCESS\020\006\022\022\n\016SCAN_UNSUCCESS\020\007\022\n\n\006RESULT"
    "\020\010\"C\n\nFileStatus\022\021\n\rFILE_INFECTED\020\001\022\022\n\016F"
    "ILE_SUSPECTED\020\002\022\016\n\nFILE_CLEAN\020\003\"\216\t\n\014Resp"
    "onseScan\0225\n\004type\030\001 \002(\0162\'.message_scan.Re"
    "sponseScan.ResponseType\022\014\n\004uuid\030\002 \002(\014\022\021\n"
    "\ttimestamp\030\003 \002(\014\022\013\n\003key\030\004 \001(\014\022\n\n\002iv\030\005 \001("
    "\014\022\n\n\002ip\030\006 \002(\014\022\017\n\007conn_ip\030\007 \002(\014\022\021\n\tconn_u"
    "uid\030\010 \002(\014\022C\n\020get_binary_value\030\t \003(\0132).me"
    "ssage_scan.ResponseScan.GetBinaryValue\022C"
    "\n\020set_binary_value\030\n \003(\0132).message_scan."
    "ResponseScan.SetBinaryValue\032\364\001\n\016GetBinar"
    "yValue\022\016\n\006binary\030\001 \001(\014\022\021\n\tfile_name\030\002 \001("
    "\014\022\021\n\tfile_size\030\003 \001(\004\0228\n\tscan_type\030\004 \001(\0162"
    "%.message_scan.ResponseScan.EncodeType\0226"
    "\n\tfile_type\030\005 \001(\0162#.message_scan.Respons"
    "eScan.FileType\022:\n\013file_status\030\006 \001(\0162%.me"
    "ssage_scan.ResponseScan.FileStatus\032\364\001\n\016S"
    "etBinaryValue\022\016\n\006binary\030\001 \001(\014\022\021\n\tfile_na"
    "me\030\002 \001(\014\022\021\n\tfile_size\030\003 \001(\004\0228\n\tscan_type"
    "\030\004 \001(\0162%.message_scan.ResponseScan.Encod"
    "eType\0226\n\tfile_type\030\005 \001(\0162#.message_scan."
    "ResponseScan.FileType\022:\n\013file_status\030\006 \001"
    "(\0162%.message_scan.ResponseScan.FileStatu"
    "s\"W\n\nEncodeType\022\007\n\003MD5\020\001\022\016\n\nMD5_HEADER\020\002"
    "\022\014\n\010MD5_BODY\020\003\022\t\n\005SHA_1\020\004\022\013\n\007SHA_256\020\005\022\n"
    "\n\006SSDEEP\020\006\"(\n\010FileType\022\006\n\002PE\020\001\022\007\n\003ELF\020\002\022"
    "\013\n\007PROCESS\020\003\"\234\001\n\014ResponseType\022\014\n\010REGISTE"
    "R\020\001\022\010\n\004SCAN\020\002\022\024\n\020CLOSE_CONNECTION\020\003\022\024\n\020R"
    "EGISTER_SUCCESS\020\004\022\026\n\022REGISTER_UNSUCCESS\020"
    "\005\022\020\n\014SCAN_SUCCESS\020\006\022\022\n\016SCAN_UNSUCCESS\020\007\022"
    "\n\n\006RESULT\020\010\"C\n\nFileStatus\022\021\n\rFILE_INFECT"
    "ED\020\001\022\022\n\016FILE_SUSPECTED\020\002\022\016\n\nFILE_CLEAN\020\003", 2360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_scan.proto", &protobuf_RegisterTypes);
  RequestScan::default_instance_ = new RequestScan();
  RequestScan_GetBinaryValue::default_instance_ = new RequestScan_GetBinaryValue();
  RequestScan_SetBinaryValue::default_instance_ = new RequestScan_SetBinaryValue();
  ResponseScan::default_instance_ = new ResponseScan();
  ResponseScan_GetBinaryValue::default_instance_ = new ResponseScan_GetBinaryValue();
  ResponseScan_SetBinaryValue::default_instance_ = new ResponseScan_SetBinaryValue();
  RequestScan::default_instance_->InitAsDefaultInstance();
  RequestScan_GetBinaryValue::default_instance_->InitAsDefaultInstance();
  RequestScan_SetBinaryValue::default_instance_->InitAsDefaultInstance();
  ResponseScan::default_instance_->InitAsDefaultInstance();
  ResponseScan_GetBinaryValue::default_instance_->InitAsDefaultInstance();
  ResponseScan_SetBinaryValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fscan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fscan_2eproto {
  StaticDescriptorInitializer_message_5fscan_2eproto() {
    protobuf_AddDesc_message_5fscan_2eproto();
  }
} static_descriptor_initializer_message_5fscan_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestScan_EncodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_EncodeType_descriptor_;
}
bool RequestScan_EncodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestScan_EncodeType RequestScan::MD5;
const RequestScan_EncodeType RequestScan::MD5_HEADER;
const RequestScan_EncodeType RequestScan::MD5_BODY;
const RequestScan_EncodeType RequestScan::SHA_1;
const RequestScan_EncodeType RequestScan::SHA_256;
const RequestScan_EncodeType RequestScan::SSDEEP;
const RequestScan_EncodeType RequestScan::EncodeType_MIN;
const RequestScan_EncodeType RequestScan::EncodeType_MAX;
const int RequestScan::EncodeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RequestScan_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_FileType_descriptor_;
}
bool RequestScan_FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestScan_FileType RequestScan::PE;
const RequestScan_FileType RequestScan::ELF;
const RequestScan_FileType RequestScan::PROCESS;
const RequestScan_FileType RequestScan::FileType_MIN;
const RequestScan_FileType RequestScan::FileType_MAX;
const int RequestScan::FileType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RequestScan_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_RequestType_descriptor_;
}
bool RequestScan_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestScan_RequestType RequestScan::REGISTER;
const RequestScan_RequestType RequestScan::SCAN;
const RequestScan_RequestType RequestScan::CLOSE_CONNECTION;
const RequestScan_RequestType RequestScan::REGISTER_SUCCESS;
const RequestScan_RequestType RequestScan::REGISTER_UNSUCCESS;
const RequestScan_RequestType RequestScan::SCAN_SUCCESS;
const RequestScan_RequestType RequestScan::SCAN_UNSUCCESS;
const RequestScan_RequestType RequestScan::RESULT;
const RequestScan_RequestType RequestScan::RequestType_MIN;
const RequestScan_RequestType RequestScan::RequestType_MAX;
const int RequestScan::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RequestScan_FileStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_FileStatus_descriptor_;
}
bool RequestScan_FileStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestScan_FileStatus RequestScan::FILE_INFECTED;
const RequestScan_FileStatus RequestScan::FILE_SUSPECTED;
const RequestScan_FileStatus RequestScan::FILE_CLEAN;
const RequestScan_FileStatus RequestScan::FileStatus_MIN;
const RequestScan_FileStatus RequestScan::FileStatus_MAX;
const int RequestScan::FileStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestScan_GetBinaryValue::kBinaryFieldNumber;
const int RequestScan_GetBinaryValue::kFileNameFieldNumber;
const int RequestScan_GetBinaryValue::kFileSizeFieldNumber;
const int RequestScan_GetBinaryValue::kScanTypeFieldNumber;
const int RequestScan_GetBinaryValue::kFileTypeFieldNumber;
const int RequestScan_GetBinaryValue::kFileStatusFieldNumber;
#endif  // !_MSC_VER

RequestScan_GetBinaryValue::RequestScan_GetBinaryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestScan_GetBinaryValue::InitAsDefaultInstance() {
}

RequestScan_GetBinaryValue::RequestScan_GetBinaryValue(const RequestScan_GetBinaryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestScan_GetBinaryValue::SharedCtor() {
  _cached_size_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  scan_type_ = 1;
  file_type_ = 1;
  file_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestScan_GetBinaryValue::~RequestScan_GetBinaryValue() {
  SharedDtor();
}

void RequestScan_GetBinaryValue::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void RequestScan_GetBinaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestScan_GetBinaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_GetBinaryValue_descriptor_;
}

const RequestScan_GetBinaryValue& RequestScan_GetBinaryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

RequestScan_GetBinaryValue* RequestScan_GetBinaryValue::default_instance_ = NULL;

RequestScan_GetBinaryValue* RequestScan_GetBinaryValue::New() const {
  return new RequestScan_GetBinaryValue;
}

void RequestScan_GetBinaryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    scan_type_ = 1;
    file_type_ = 1;
    file_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestScan_GetBinaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_type;
        break;
      }

      // optional .message_scan.RequestScan.EncodeType scan_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_EncodeType_IsValid(value)) {
            set_scan_type(static_cast< ::message_scan::RequestScan_EncodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // optional .message_scan.RequestScan.FileType file_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_FileType_IsValid(value)) {
            set_file_type(static_cast< ::message_scan::RequestScan_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_status;
        break;
      }

      // optional .message_scan.RequestScan.FileStatus file_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_FileStatus_IsValid(value)) {
            set_file_status(static_cast< ::message_scan::RequestScan_FileStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestScan_GetBinaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binary(), output);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_type(), output);
  }

  // optional .message_scan.RequestScan.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  // optional .message_scan.RequestScan.FileStatus file_status = 6;
  if (has_file_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->file_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestScan_GetBinaryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary(), target);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_type(), target);
  }

  // optional .message_scan.RequestScan.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  // optional .message_scan.RequestScan.FileStatus file_status = 6;
  if (has_file_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->file_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestScan_GetBinaryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes binary = 1;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional .message_scan.RequestScan.EncodeType scan_type = 4;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_type());
    }

    // optional .message_scan.RequestScan.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

    // optional .message_scan.RequestScan.FileStatus file_status = 6;
    if (has_file_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestScan_GetBinaryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestScan_GetBinaryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestScan_GetBinaryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestScan_GetBinaryValue::MergeFrom(const RequestScan_GetBinaryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_file_status()) {
      set_file_status(from.file_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestScan_GetBinaryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestScan_GetBinaryValue::CopyFrom(const RequestScan_GetBinaryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestScan_GetBinaryValue::IsInitialized() const {

  return true;
}

void RequestScan_GetBinaryValue::Swap(RequestScan_GetBinaryValue* other) {
  if (other != this) {
    std::swap(binary_, other->binary_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(file_type_, other->file_type_);
    std::swap(file_status_, other->file_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestScan_GetBinaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestScan_GetBinaryValue_descriptor_;
  metadata.reflection = RequestScan_GetBinaryValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RequestScan_SetBinaryValue::kBinaryFieldNumber;
const int RequestScan_SetBinaryValue::kFileNameFieldNumber;
const int RequestScan_SetBinaryValue::kFileSizeFieldNumber;
const int RequestScan_SetBinaryValue::kScanTypeFieldNumber;
const int RequestScan_SetBinaryValue::kFileTypeFieldNumber;
const int RequestScan_SetBinaryValue::kFileStatusFieldNumber;
#endif  // !_MSC_VER

RequestScan_SetBinaryValue::RequestScan_SetBinaryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestScan_SetBinaryValue::InitAsDefaultInstance() {
}

RequestScan_SetBinaryValue::RequestScan_SetBinaryValue(const RequestScan_SetBinaryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestScan_SetBinaryValue::SharedCtor() {
  _cached_size_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  scan_type_ = 1;
  file_type_ = 1;
  file_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestScan_SetBinaryValue::~RequestScan_SetBinaryValue() {
  SharedDtor();
}

void RequestScan_SetBinaryValue::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void RequestScan_SetBinaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestScan_SetBinaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_SetBinaryValue_descriptor_;
}

const RequestScan_SetBinaryValue& RequestScan_SetBinaryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

RequestScan_SetBinaryValue* RequestScan_SetBinaryValue::default_instance_ = NULL;

RequestScan_SetBinaryValue* RequestScan_SetBinaryValue::New() const {
  return new RequestScan_SetBinaryValue;
}

void RequestScan_SetBinaryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    scan_type_ = 1;
    file_type_ = 1;
    file_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestScan_SetBinaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_type;
        break;
      }

      // optional .message_scan.RequestScan.EncodeType scan_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_EncodeType_IsValid(value)) {
            set_scan_type(static_cast< ::message_scan::RequestScan_EncodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // optional .message_scan.RequestScan.FileType file_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_FileType_IsValid(value)) {
            set_file_type(static_cast< ::message_scan::RequestScan_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_status;
        break;
      }

      // optional .message_scan.RequestScan.FileStatus file_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_FileStatus_IsValid(value)) {
            set_file_status(static_cast< ::message_scan::RequestScan_FileStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestScan_SetBinaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binary(), output);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_type(), output);
  }

  // optional .message_scan.RequestScan.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  // optional .message_scan.RequestScan.FileStatus file_status = 6;
  if (has_file_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->file_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestScan_SetBinaryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary(), target);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // optional .message_scan.RequestScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_type(), target);
  }

  // optional .message_scan.RequestScan.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  // optional .message_scan.RequestScan.FileStatus file_status = 6;
  if (has_file_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->file_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestScan_SetBinaryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes binary = 1;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional .message_scan.RequestScan.EncodeType scan_type = 4;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_type());
    }

    // optional .message_scan.RequestScan.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

    // optional .message_scan.RequestScan.FileStatus file_status = 6;
    if (has_file_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestScan_SetBinaryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestScan_SetBinaryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestScan_SetBinaryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestScan_SetBinaryValue::MergeFrom(const RequestScan_SetBinaryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_file_status()) {
      set_file_status(from.file_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestScan_SetBinaryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestScan_SetBinaryValue::CopyFrom(const RequestScan_SetBinaryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestScan_SetBinaryValue::IsInitialized() const {

  return true;
}

void RequestScan_SetBinaryValue::Swap(RequestScan_SetBinaryValue* other) {
  if (other != this) {
    std::swap(binary_, other->binary_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(file_type_, other->file_type_);
    std::swap(file_status_, other->file_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestScan_SetBinaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestScan_SetBinaryValue_descriptor_;
  metadata.reflection = RequestScan_SetBinaryValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RequestScan::kTypeFieldNumber;
const int RequestScan::kUuidFieldNumber;
const int RequestScan::kTimestampFieldNumber;
const int RequestScan::kKeyFieldNumber;
const int RequestScan::kIvFieldNumber;
const int RequestScan::kIpFieldNumber;
const int RequestScan::kConnIpFieldNumber;
const int RequestScan::kConnUuidFieldNumber;
const int RequestScan::kGetBinaryValueFieldNumber;
const int RequestScan::kSetBinaryValueFieldNumber;
#endif  // !_MSC_VER

RequestScan::RequestScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestScan::InitAsDefaultInstance() {
}

RequestScan::RequestScan(const RequestScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestScan::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conn_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conn_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestScan::~RequestScan() {
  SharedDtor();
}

void RequestScan::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (iv_ != &::google::protobuf::internal::kEmptyString) {
    delete iv_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (conn_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete conn_ip_;
  }
  if (conn_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete conn_uuid_;
  }
  if (this != default_instance_) {
  }
}

void RequestScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScan_descriptor_;
}

const RequestScan& RequestScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

RequestScan* RequestScan::default_instance_ = NULL;

RequestScan* RequestScan::New() const {
  return new RequestScan;
}

void RequestScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_iv()) {
      if (iv_ != &::google::protobuf::internal::kEmptyString) {
        iv_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_conn_ip()) {
      if (conn_ip_ != &::google::protobuf::internal::kEmptyString) {
        conn_ip_->clear();
      }
    }
    if (has_conn_uuid()) {
      if (conn_uuid_ != &::google::protobuf::internal::kEmptyString) {
        conn_uuid_->clear();
      }
    }
  }
  get_binary_value_.Clear();
  set_binary_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message_scan.RequestScan.RequestType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::RequestScan_RequestType_IsValid(value)) {
            set_type(static_cast< ::message_scan::RequestScan_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // required bytes uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required bytes timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_iv;
        break;
      }

      // optional bytes iv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // required bytes ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_conn_ip;
        break;
      }

      // required bytes conn_ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conn_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_conn_uuid;
        break;
      }

      // required bytes conn_uuid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conn_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_get_binary_value;
        break;
      }

      // repeated .message_scan.RequestScan.GetBinaryValue get_binary_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_binary_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_binary_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_get_binary_value;
        if (input->ExpectTag(82)) goto parse_set_binary_value;
        break;
      }

      // repeated .message_scan.RequestScan.SetBinaryValue set_binary_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_binary_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_set_binary_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_set_binary_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message_scan.RequestScan.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uuid(), output);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->timestamp(), output);
  }

  // optional bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(), output);
  }

  // optional bytes iv = 5;
  if (has_iv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->iv(), output);
  }

  // required bytes ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->ip(), output);
  }

  // required bytes conn_ip = 7;
  if (has_conn_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->conn_ip(), output);
  }

  // required bytes conn_uuid = 8;
  if (has_conn_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->conn_uuid(), output);
  }

  // repeated .message_scan.RequestScan.GetBinaryValue get_binary_value = 9;
  for (int i = 0; i < this->get_binary_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->get_binary_value(i), output);
  }

  // repeated .message_scan.RequestScan.SetBinaryValue set_binary_value = 10;
  for (int i = 0; i < this->set_binary_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->set_binary_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .message_scan.RequestScan.RequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->timestamp(), target);
  }

  // optional bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // optional bytes iv = 5;
  if (has_iv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->iv(), target);
  }

  // required bytes ip = 6;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ip(), target);
  }

  // required bytes conn_ip = 7;
  if (has_conn_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->conn_ip(), target);
  }

  // required bytes conn_uuid = 8;
  if (has_conn_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->conn_uuid(), target);
  }

  // repeated .message_scan.RequestScan.GetBinaryValue get_binary_value = 9;
  for (int i = 0; i < this->get_binary_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->get_binary_value(i), target);
  }

  // repeated .message_scan.RequestScan.SetBinaryValue set_binary_value = 10;
  for (int i = 0; i < this->set_binary_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->set_binary_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message_scan.RequestScan.RequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // required bytes timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp());
    }

    // optional bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes iv = 5;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iv());
    }

    // required bytes ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required bytes conn_ip = 7;
    if (has_conn_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->conn_ip());
    }

    // required bytes conn_uuid = 8;
    if (has_conn_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->conn_uuid());
    }

  }
  // repeated .message_scan.RequestScan.GetBinaryValue get_binary_value = 9;
  total_size += 1 * this->get_binary_value_size();
  for (int i = 0; i < this->get_binary_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_binary_value(i));
  }

  // repeated .message_scan.RequestScan.SetBinaryValue set_binary_value = 10;
  total_size += 1 * this->set_binary_value_size();
  for (int i = 0; i < this->set_binary_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->set_binary_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestScan::MergeFrom(const RequestScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_binary_value_.MergeFrom(from.get_binary_value_);
  set_binary_value_.MergeFrom(from.set_binary_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_iv()) {
      set_iv(from.iv());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_conn_ip()) {
      set_conn_ip(from.conn_ip());
    }
    if (from.has_conn_uuid()) {
      set_conn_uuid(from.conn_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestScan::CopyFrom(const RequestScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestScan::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e7) != 0x000000e7) return false;

  return true;
}

void RequestScan::Swap(RequestScan* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(key_, other->key_);
    std::swap(iv_, other->iv_);
    std::swap(ip_, other->ip_);
    std::swap(conn_ip_, other->conn_ip_);
    std::swap(conn_uuid_, other->conn_uuid_);
    get_binary_value_.Swap(&other->get_binary_value_);
    set_binary_value_.Swap(&other->set_binary_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestScan_descriptor_;
  metadata.reflection = RequestScan_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseScan_EncodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_EncodeType_descriptor_;
}
bool ResponseScan_EncodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseScan_EncodeType ResponseScan::MD5;
const ResponseScan_EncodeType ResponseScan::MD5_HEADER;
const ResponseScan_EncodeType ResponseScan::MD5_BODY;
const ResponseScan_EncodeType ResponseScan::SHA_1;
const ResponseScan_EncodeType ResponseScan::SHA_256;
const ResponseScan_EncodeType ResponseScan::SSDEEP;
const ResponseScan_EncodeType ResponseScan::EncodeType_MIN;
const ResponseScan_EncodeType ResponseScan::EncodeType_MAX;
const int ResponseScan::EncodeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResponseScan_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_FileType_descriptor_;
}
bool ResponseScan_FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseScan_FileType ResponseScan::PE;
const ResponseScan_FileType ResponseScan::ELF;
const ResponseScan_FileType ResponseScan::PROCESS;
const ResponseScan_FileType ResponseScan::FileType_MIN;
const ResponseScan_FileType ResponseScan::FileType_MAX;
const int ResponseScan::FileType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResponseScan_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_ResponseType_descriptor_;
}
bool ResponseScan_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseScan_ResponseType ResponseScan::REGISTER;
const ResponseScan_ResponseType ResponseScan::SCAN;
const ResponseScan_ResponseType ResponseScan::CLOSE_CONNECTION;
const ResponseScan_ResponseType ResponseScan::REGISTER_SUCCESS;
const ResponseScan_ResponseType ResponseScan::REGISTER_UNSUCCESS;
const ResponseScan_ResponseType ResponseScan::SCAN_SUCCESS;
const ResponseScan_ResponseType ResponseScan::SCAN_UNSUCCESS;
const ResponseScan_ResponseType ResponseScan::RESULT;
const ResponseScan_ResponseType ResponseScan::ResponseType_MIN;
const ResponseScan_ResponseType ResponseScan::ResponseType_MAX;
const int ResponseScan::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ResponseScan_FileStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_FileStatus_descriptor_;
}
bool ResponseScan_FileStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResponseScan_FileStatus ResponseScan::FILE_INFECTED;
const ResponseScan_FileStatus ResponseScan::FILE_SUSPECTED;
const ResponseScan_FileStatus ResponseScan::FILE_CLEAN;
const ResponseScan_FileStatus ResponseScan::FileStatus_MIN;
const ResponseScan_FileStatus ResponseScan::FileStatus_MAX;
const int ResponseScan::FileStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResponseScan_GetBinaryValue::kBinaryFieldNumber;
const int ResponseScan_GetBinaryValue::kFileNameFieldNumber;
const int ResponseScan_GetBinaryValue::kFileSizeFieldNumber;
const int ResponseScan_GetBinaryValue::kScanTypeFieldNumber;
const int ResponseScan_GetBinaryValue::kFileTypeFieldNumber;
const int ResponseScan_GetBinaryValue::kFileStatusFieldNumber;
#endif  // !_MSC_VER

ResponseScan_GetBinaryValue::ResponseScan_GetBinaryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseScan_GetBinaryValue::InitAsDefaultInstance() {
}

ResponseScan_GetBinaryValue::ResponseScan_GetBinaryValue(const ResponseScan_GetBinaryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseScan_GetBinaryValue::SharedCtor() {
  _cached_size_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  scan_type_ = 1;
  file_type_ = 1;
  file_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseScan_GetBinaryValue::~ResponseScan_GetBinaryValue() {
  SharedDtor();
}

void ResponseScan_GetBinaryValue::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void ResponseScan_GetBinaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseScan_GetBinaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_GetBinaryValue_descriptor_;
}

const ResponseScan_GetBinaryValue& ResponseScan_GetBinaryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

ResponseScan_GetBinaryValue* ResponseScan_GetBinaryValue::default_instance_ = NULL;

ResponseScan_GetBinaryValue* ResponseScan_GetBinaryValue::New() const {
  return new ResponseScan_GetBinaryValue;
}

void ResponseScan_GetBinaryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    scan_type_ = 1;
    file_type_ = 1;
    file_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseScan_GetBinaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_type;
        break;
      }

      // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_EncodeType_IsValid(value)) {
            set_scan_type(static_cast< ::message_scan::ResponseScan_EncodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // optional .message_scan.ResponseScan.FileType file_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_FileType_IsValid(value)) {
            set_file_type(static_cast< ::message_scan::ResponseScan_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_status;
        break;
      }

      // optional .message_scan.ResponseScan.FileStatus file_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_FileStatus_IsValid(value)) {
            set_file_status(static_cast< ::message_scan::ResponseScan_FileStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseScan_GetBinaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binary(), output);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_type(), output);
  }

  // optional .message_scan.ResponseScan.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  // optional .message_scan.ResponseScan.FileStatus file_status = 6;
  if (has_file_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->file_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseScan_GetBinaryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary(), target);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_type(), target);
  }

  // optional .message_scan.ResponseScan.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  // optional .message_scan.ResponseScan.FileStatus file_status = 6;
  if (has_file_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->file_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseScan_GetBinaryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes binary = 1;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_type());
    }

    // optional .message_scan.ResponseScan.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

    // optional .message_scan.ResponseScan.FileStatus file_status = 6;
    if (has_file_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseScan_GetBinaryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseScan_GetBinaryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseScan_GetBinaryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseScan_GetBinaryValue::MergeFrom(const ResponseScan_GetBinaryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_file_status()) {
      set_file_status(from.file_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseScan_GetBinaryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseScan_GetBinaryValue::CopyFrom(const ResponseScan_GetBinaryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseScan_GetBinaryValue::IsInitialized() const {

  return true;
}

void ResponseScan_GetBinaryValue::Swap(ResponseScan_GetBinaryValue* other) {
  if (other != this) {
    std::swap(binary_, other->binary_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(file_type_, other->file_type_);
    std::swap(file_status_, other->file_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseScan_GetBinaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseScan_GetBinaryValue_descriptor_;
  metadata.reflection = ResponseScan_GetBinaryValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResponseScan_SetBinaryValue::kBinaryFieldNumber;
const int ResponseScan_SetBinaryValue::kFileNameFieldNumber;
const int ResponseScan_SetBinaryValue::kFileSizeFieldNumber;
const int ResponseScan_SetBinaryValue::kScanTypeFieldNumber;
const int ResponseScan_SetBinaryValue::kFileTypeFieldNumber;
const int ResponseScan_SetBinaryValue::kFileStatusFieldNumber;
#endif  // !_MSC_VER

ResponseScan_SetBinaryValue::ResponseScan_SetBinaryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseScan_SetBinaryValue::InitAsDefaultInstance() {
}

ResponseScan_SetBinaryValue::ResponseScan_SetBinaryValue(const ResponseScan_SetBinaryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseScan_SetBinaryValue::SharedCtor() {
  _cached_size_ = 0;
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  scan_type_ = 1;
  file_type_ = 1;
  file_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseScan_SetBinaryValue::~ResponseScan_SetBinaryValue() {
  SharedDtor();
}

void ResponseScan_SetBinaryValue::SharedDtor() {
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void ResponseScan_SetBinaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseScan_SetBinaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_SetBinaryValue_descriptor_;
}

const ResponseScan_SetBinaryValue& ResponseScan_SetBinaryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

ResponseScan_SetBinaryValue* ResponseScan_SetBinaryValue::default_instance_ = NULL;

ResponseScan_SetBinaryValue* ResponseScan_SetBinaryValue::New() const {
  return new ResponseScan_SetBinaryValue;
}

void ResponseScan_SetBinaryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    scan_type_ = 1;
    file_type_ = 1;
    file_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseScan_SetBinaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes binary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_type;
        break;
      }

      // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_EncodeType_IsValid(value)) {
            set_scan_type(static_cast< ::message_scan::ResponseScan_EncodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // optional .message_scan.ResponseScan.FileType file_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_FileType_IsValid(value)) {
            set_file_type(static_cast< ::message_scan::ResponseScan_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_status;
        break;
      }

      // optional .message_scan.ResponseScan.FileStatus file_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_FileStatus_IsValid(value)) {
            set_file_status(static_cast< ::message_scan::ResponseScan_FileStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseScan_SetBinaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->binary(), output);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_type(), output);
  }

  // optional .message_scan.ResponseScan.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  // optional .message_scan.ResponseScan.FileStatus file_status = 6;
  if (has_file_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->file_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseScan_SetBinaryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes binary = 1;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->binary(), target);
  }

  // optional bytes file_name = 2;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_type(), target);
  }

  // optional .message_scan.ResponseScan.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  // optional .message_scan.ResponseScan.FileStatus file_status = 6;
  if (has_file_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->file_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseScan_SetBinaryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes binary = 1;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional .message_scan.ResponseScan.EncodeType scan_type = 4;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_type());
    }

    // optional .message_scan.ResponseScan.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

    // optional .message_scan.ResponseScan.FileStatus file_status = 6;
    if (has_file_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseScan_SetBinaryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseScan_SetBinaryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseScan_SetBinaryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseScan_SetBinaryValue::MergeFrom(const ResponseScan_SetBinaryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_file_status()) {
      set_file_status(from.file_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseScan_SetBinaryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseScan_SetBinaryValue::CopyFrom(const ResponseScan_SetBinaryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseScan_SetBinaryValue::IsInitialized() const {

  return true;
}

void ResponseScan_SetBinaryValue::Swap(ResponseScan_SetBinaryValue* other) {
  if (other != this) {
    std::swap(binary_, other->binary_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_size_, other->file_size_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(file_type_, other->file_type_);
    std::swap(file_status_, other->file_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseScan_SetBinaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseScan_SetBinaryValue_descriptor_;
  metadata.reflection = ResponseScan_SetBinaryValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResponseScan::kTypeFieldNumber;
const int ResponseScan::kUuidFieldNumber;
const int ResponseScan::kTimestampFieldNumber;
const int ResponseScan::kKeyFieldNumber;
const int ResponseScan::kIvFieldNumber;
const int ResponseScan::kIpFieldNumber;
const int ResponseScan::kConnIpFieldNumber;
const int ResponseScan::kConnUuidFieldNumber;
const int ResponseScan::kGetBinaryValueFieldNumber;
const int ResponseScan::kSetBinaryValueFieldNumber;
#endif  // !_MSC_VER

ResponseScan::ResponseScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseScan::InitAsDefaultInstance() {
}

ResponseScan::ResponseScan(const ResponseScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseScan::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conn_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conn_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseScan::~ResponseScan() {
  SharedDtor();
}

void ResponseScan::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (iv_ != &::google::protobuf::internal::kEmptyString) {
    delete iv_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (conn_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete conn_ip_;
  }
  if (conn_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete conn_uuid_;
  }
  if (this != default_instance_) {
  }
}

void ResponseScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseScan_descriptor_;
}

const ResponseScan& ResponseScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fscan_2eproto();
  return *default_instance_;
}

ResponseScan* ResponseScan::default_instance_ = NULL;

ResponseScan* ResponseScan::New() const {
  return new ResponseScan;
}

void ResponseScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_iv()) {
      if (iv_ != &::google::protobuf::internal::kEmptyString) {
        iv_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_conn_ip()) {
      if (conn_ip_ != &::google::protobuf::internal::kEmptyString) {
        conn_ip_->clear();
      }
    }
    if (has_conn_uuid()) {
      if (conn_uuid_ != &::google::protobuf::internal::kEmptyString) {
        conn_uuid_->clear();
      }
    }
  }
  get_binary_value_.Clear();
  set_binary_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message_scan.ResponseScan.ResponseType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_scan::ResponseScan_ResponseType_IsValid(value)) {
            set_type(static_cast< ::message_scan::ResponseScan_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // required bytes uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required bytes timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_iv;
        break;
      }

      // optional bytes iv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // required bytes ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_conn_ip;
        break;
      }

      // required bytes conn_ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conn_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_conn_uuid;
        break;
      }

      // required bytes conn_uuid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conn_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_get_binary_value;
        break;
      }

      // repeated .message_scan.ResponseScan.GetBinaryValue get_binary_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_binary_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_binary_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_get_binary_value;
        if (input->ExpectTag(82)) goto parse_set_binary_value;
        break;
      }

      // repeated .message_scan.ResponseScan.SetBinaryValue set_binary_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_binary_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_set_binary_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_set_binary_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .message_scan.ResponseScan.ResponseType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uuid(), output);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->timestamp(), output);
  }

  // optional bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(), output);
  }

  // optional bytes iv = 5;
  if (has_iv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->iv(), output);
  }

  // required bytes ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->ip(), output);
  }

  // required bytes conn_ip = 7;
  if (has_conn_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->conn_ip(), output);
  }

  // required bytes conn_uuid = 8;
  if (has_conn_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->conn_uuid(), output);
  }

  // repeated .message_scan.ResponseScan.GetBinaryValue get_binary_value = 9;
  for (int i = 0; i < this->get_binary_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->get_binary_value(i), output);
  }

  // repeated .message_scan.ResponseScan.SetBinaryValue set_binary_value = 10;
  for (int i = 0; i < this->set_binary_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->set_binary_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .message_scan.ResponseScan.ResponseType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // required bytes timestamp = 3;
  if (has_timestamp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->timestamp(), target);
  }

  // optional bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // optional bytes iv = 5;
  if (has_iv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->iv(), target);
  }

  // required bytes ip = 6;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ip(), target);
  }

  // required bytes conn_ip = 7;
  if (has_conn_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->conn_ip(), target);
  }

  // required bytes conn_uuid = 8;
  if (has_conn_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->conn_uuid(), target);
  }

  // repeated .message_scan.ResponseScan.GetBinaryValue get_binary_value = 9;
  for (int i = 0; i < this->get_binary_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->get_binary_value(i), target);
  }

  // repeated .message_scan.ResponseScan.SetBinaryValue set_binary_value = 10;
  for (int i = 0; i < this->set_binary_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->set_binary_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message_scan.ResponseScan.ResponseType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // required bytes timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp());
    }

    // optional bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes iv = 5;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iv());
    }

    // required bytes ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required bytes conn_ip = 7;
    if (has_conn_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->conn_ip());
    }

    // required bytes conn_uuid = 8;
    if (has_conn_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->conn_uuid());
    }

  }
  // repeated .message_scan.ResponseScan.GetBinaryValue get_binary_value = 9;
  total_size += 1 * this->get_binary_value_size();
  for (int i = 0; i < this->get_binary_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_binary_value(i));
  }

  // repeated .message_scan.ResponseScan.SetBinaryValue set_binary_value = 10;
  total_size += 1 * this->set_binary_value_size();
  for (int i = 0; i < this->set_binary_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->set_binary_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseScan::MergeFrom(const ResponseScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_binary_value_.MergeFrom(from.get_binary_value_);
  set_binary_value_.MergeFrom(from.set_binary_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_iv()) {
      set_iv(from.iv());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_conn_ip()) {
      set_conn_ip(from.conn_ip());
    }
    if (from.has_conn_uuid()) {
      set_conn_uuid(from.conn_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseScan::CopyFrom(const ResponseScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseScan::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e7) != 0x000000e7) return false;

  return true;
}

void ResponseScan::Swap(ResponseScan* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(key_, other->key_);
    std::swap(iv_, other->iv_);
    std::swap(ip_, other->ip_);
    std::swap(conn_ip_, other->conn_ip_);
    std::swap(conn_uuid_, other->conn_uuid_);
    get_binary_value_.Swap(&other->get_binary_value_);
    set_binary_value_.Swap(&other->set_binary_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseScan_descriptor_;
  metadata.reflection = ResponseScan_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message_scan

// @@protoc_insertion_point(global_scope)
