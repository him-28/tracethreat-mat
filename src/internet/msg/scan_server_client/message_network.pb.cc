// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message_network {

namespace {

const ::google::protobuf::Descriptor* ScanVirusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanVirusInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScanVirusInfo_ScanStatusType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fnetwork_2eproto() {
  protobuf_AddDesc_message_5fnetwork_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_network.proto");
  GOOGLE_CHECK(file != NULL);
  ScanVirusInfo_descriptor_ = file->message_type(0);
  static const int ScanVirusInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanVirusInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanVirusInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanVirusInfo, mac_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanVirusInfo, scan_status_),
  };
  ScanVirusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanVirusInfo_descriptor_,
      ScanVirusInfo::default_instance_,
      ScanVirusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanVirusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanVirusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanVirusInfo));
  ScanVirusInfo_ScanStatusType_descriptor_ = ScanVirusInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fnetwork_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanVirusInfo_descriptor_, &ScanVirusInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fnetwork_2eproto() {
  delete ScanVirusInfo::default_instance_;
  delete ScanVirusInfo_reflection_;
}

void protobuf_AddDesc_message_5fnetwork_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025message_network.proto\022\017message_network"
    "\"\240\002\n\rScanVirusInfo\022\n\n\002ip\030\001 \002(\014\022\014\n\004uuid\030\002"
    " \002(\014\022\020\n\010mac_addr\030\003 \002(\014\022B\n\013scan_status\030\004 "
    "\001(\0162-.message_network.ScanVirusInfo.Scan"
    "StatusType\"\236\001\n\016ScanStatusType\022\014\n\010REGISTE"
    "R\020\001\022\010\n\004SCAN\020\002\022\024\n\020CLOSE_CONNECTION\020\003\022\024\n\020R"
    "EGISTER_SUCCESS\020\004\022\026\n\022REGISTER_UNSUCCESS\020"
    "\005\022\020\n\014SCAN_SUCCESS\020\006\022\022\n\016SCAN_UNSUCCESS\020\007\022"
    "\n\n\006RESULT\020\010", 331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_network.proto", &protobuf_RegisterTypes);
  ScanVirusInfo::default_instance_ = new ScanVirusInfo();
  ScanVirusInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fnetwork_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fnetwork_2eproto {
  StaticDescriptorInitializer_message_5fnetwork_2eproto() {
    protobuf_AddDesc_message_5fnetwork_2eproto();
  }
} static_descriptor_initializer_message_5fnetwork_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ScanVirusInfo_ScanStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanVirusInfo_ScanStatusType_descriptor_;
}
bool ScanVirusInfo_ScanStatusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScanVirusInfo_ScanStatusType ScanVirusInfo::REGISTER;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::SCAN;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::CLOSE_CONNECTION;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::REGISTER_SUCCESS;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::REGISTER_UNSUCCESS;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::SCAN_SUCCESS;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::SCAN_UNSUCCESS;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::RESULT;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::ScanStatusType_MIN;
const ScanVirusInfo_ScanStatusType ScanVirusInfo::ScanStatusType_MAX;
const int ScanVirusInfo::ScanStatusType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ScanVirusInfo::kIpFieldNumber;
const int ScanVirusInfo::kUuidFieldNumber;
const int ScanVirusInfo::kMacAddrFieldNumber;
const int ScanVirusInfo::kScanStatusFieldNumber;
#endif  // !_MSC_VER

ScanVirusInfo::ScanVirusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanVirusInfo::InitAsDefaultInstance() {
}

ScanVirusInfo::ScanVirusInfo(const ScanVirusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanVirusInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scan_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanVirusInfo::~ScanVirusInfo() {
  SharedDtor();
}

void ScanVirusInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (mac_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_addr_;
  }
  if (this != default_instance_) {
  }
}

void ScanVirusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanVirusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanVirusInfo_descriptor_;
}

const ScanVirusInfo& ScanVirusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fnetwork_2eproto();
  return *default_instance_;
}

ScanVirusInfo* ScanVirusInfo::default_instance_ = NULL;

ScanVirusInfo* ScanVirusInfo::New() const {
  return new ScanVirusInfo;
}

void ScanVirusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_mac_addr()) {
      if (mac_addr_ != &::google::protobuf::internal::kEmptyString) {
        mac_addr_->clear();
      }
    }
    scan_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanVirusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // required bytes uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mac_addr;
        break;
      }

      // required bytes mac_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scan_status;
        break;
      }

      // optional .message_network.ScanVirusInfo.ScanStatusType scan_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_network::ScanVirusInfo_ScanStatusType_IsValid(value)) {
            set_scan_status(static_cast< ::message_network::ScanVirusInfo_ScanStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanVirusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uuid(), output);
  }

  // required bytes mac_addr = 3;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mac_addr(), output);
  }

  // optional .message_network.ScanVirusInfo.ScanStatusType scan_status = 4;
  if (has_scan_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scan_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanVirusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // required bytes mac_addr = 3;
  if (has_mac_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mac_addr(), target);
  }

  // optional .message_network.ScanVirusInfo.ScanStatusType scan_status = 4;
  if (has_scan_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scan_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanVirusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // required bytes mac_addr = 3;
    if (has_mac_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac_addr());
    }

    // optional .message_network.ScanVirusInfo.ScanStatusType scan_status = 4;
    if (has_scan_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanVirusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanVirusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanVirusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanVirusInfo::MergeFrom(const ScanVirusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_mac_addr()) {
      set_mac_addr(from.mac_addr());
    }
    if (from.has_scan_status()) {
      set_scan_status(from.scan_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanVirusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanVirusInfo::CopyFrom(const ScanVirusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanVirusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ScanVirusInfo::Swap(ScanVirusInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(uuid_, other->uuid_);
    std::swap(mac_addr_, other->mac_addr_);
    std::swap(scan_status_, other->scan_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanVirusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanVirusInfo_descriptor_;
  metadata.reflection = ScanVirusInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message_network

// @@protoc_insertion_point(global_scope)
