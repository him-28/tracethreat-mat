/*
* Copyright 2014 Chatsiri Rattana.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*  Titles			                                          Authors	         Date
 * Server connection                                      R.Chatsiri       30/07/2014
 */

package message_scan;

message RequestScan{

		//Not _suffix mean full file encoded.
	  enum EncodeType{
			MD5        = 1;
			MD5_HEADER = 2;
			MD5_BODY   = 3;
		  SHA_1      = 4;
			SHA_256    = 5;
			SSDEEP     = 6;
		}

		enum FileType{
				PE 			= 1;
				ELF 		= 2;
				PROCESS = 3;
		}

		enum RequestType{
			REGISTER = 1;
      SCAN = 2;
			RESULT = 3;
		}
		required RequestType  type     = 1;
		required string  	   uuid 		 = 2; // Machine UUID send from client.
		required string      timestamp = 3;
		//required string type = 3; // Request types between server and client.
		message RequestGetBinaryValue{
			optional string binary     = 1;   // Binary file.
			optional string file_name  = 2;   // File name.
			optional uint64 file_size  = 3;
			optional EncodeType  scan_type = 4; // Scan with decode type.
			optional FileType    file_type = 5; // File type.

		}

		optional RequestGetBinaryValue request_get_binary_value = 4;

		message RequestSetBinaryValue{
			optional string binary      = 1;   // Binary file.
			optional string file_name   = 2;   // File name.
			optional uint64 file_size   = 3;
			optional EncodeType  scan_type = 4; // Scan with decode type.
			optional FileType    file_type = 5; // File type.

		}

		repeated RequestSetBinaryValue  request_set_binary_value = 5;

}


message ResponseScan{

		required string  	 uuid 		 = 1; // Machine UUID send from client.
		required string    timestamp = 2;

		message ResponseGetBinaryValue{
			required string binary         = 1;   // Binary file.
			required string file_name      = 2;   // File name.
			optional bool   status         = 3;   // Found or not found infected file.
			optional uint64 file_size      = 4;   // File size.
		}

		optional ResponseGetBinaryValue response_get_binary_value = 3;

		message ResponseSetBinaryValue{
			required string binary     = 1;   // Binary file.
			required string file_name  = 2;   // File name.
			optional bool   status     = 3;   // Found or not found infected file.
			optional uint64 file_size  = 4;   // File size.
		}

		optional ResponseSetBinaryValue  reponse_set_binary_value = 4;


}
