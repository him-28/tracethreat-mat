/*
* Copyright 2014 Chatsiri Rattana.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*  Titles			                                          Authors	         Date
 * Server connection                                      R.Chatsiri       30/07/2014
 */

package message_scan;

message RequestScan{

		//Not _suffix mean full file encoded.
	  enum EncodeType{
			MD5        = 1;
			MD5_HEADER = 2;
			MD5_BODY   = 3;
		  SHA_1      = 4;
			SHA_256    = 5;
			SSDEEP     = 6;
		}

		enum FileType{
				PE 			= 1;
				ELF 		= 2;
				PROCESS = 3;
		}

		enum RequestType{
			REGISTER = 1;
      SCAN = 2;
			CLOSE_CONNECTION = 3;
			REGISTER_SUCCESS = 4;
			REGISTER_UNSUCCESS = 5;
			SCAN_SUCCESS = 6;
			SCAN_UNSUCCESS = 7;
			RESULT = 8;
		}

		required RequestType  type     	= 1; //Request types between server and client.
		required bytes  	   uuid 		 	= 2; //Machine UUID send from client.
		required bytes      timestamp 	= 3; //Timestamp is external system (International Time)
		optional bytes      key         = 4; // AES key support fall back step from SSL
    optional bytes      iv          = 5; // Init vector support fall back step from SSL
		required bytes      ip          = 6; // IP Address from client. 

		required bytes      conn_ip     = 7; // IP connection between client/server
    required bytes      conn_uuid   = 8; // UUID connection between client/server

//		message RequestGetBinaryValue{
      message GetBinaryValue{
			optional bytes binary     	= 1;   // Binary file.
			optional bytes file_name  	= 2;   // File name.
			optional uint64 file_size  	= 3;
			optional EncodeType  scan_type = 4; // Scan with decode type.
			optional FileType    file_type = 5; // File type.
		}

//		repeated RequestGetBinaryValue request_get_binary_value = 9;
      repeated GetBinaryValue get_binary_value = 9;

//		message RequestSetBinaryValue{

      message SetBinaryValue{
			optional bytes binary      	= 1;   // Binary file.
			optional bytes file_name   	= 2;   // File name.
			optional uint64 file_size   = 3;
			optional EncodeType  scan_type = 4; // Scan with decode type.
			optional FileType    file_type = 5; // File type.
		}

//		repeated RequestSetBinaryValue  request_set_binary_value = 10;
      repeated SetBinaryValue  set_binary_value = 10;

}


message ResponseScan{

		//Not _suffix mean full file encoded.
	  enum EncodeType{
			MD5        = 1;
			MD5_HEADER = 2;
			MD5_BODY   = 3;
		  SHA_1      = 4;
			SHA_256    = 5;
			SSDEEP     = 6;
		}

		enum FileType{
				PE 			= 1;
				ELF 		= 2;
				PROCESS = 3;
		}

		enum ResponseType{

			REGISTER = 1;
      SCAN = 2;
			CLOSE_CONNECTION = 3;
			REGISTER_SUCCESS = 4;
			REGISTER_UNSUCCESS = 5;
			SCAN_SUCCESS = 6;
			SCAN_UNSUCCESS = 7;
			RESULT = 8;

		}

		required ResponseType  type      = 1;
		required bytes  	   	 uuid 		 = 2; // Machine UUID send from client.
		required bytes         timestamp = 3;
		optional bytes         key       = 4;
    optional bytes         iv        = 5;
		required bytes         ip        = 6; // IP Address from client.

		required bytes      conn_ip     = 7;
    required bytes      conn_uuid   = 8;

//		message ResponseGetBinaryValue{
      message  GetBinaryValue{ 
			optional bytes binary     	= 1;   // Binary file.
			optional bytes file_name  	= 2;   // File name.
			optional uint64 file_size  	= 3;
			optional EncodeType  scan_type = 4; // Scan with decode type.
			optional FileType    file_type = 5; // File type.
		}

//		repeated ResponseGetBinaryValue response_get_binary_value = 9;
    repeated GetBinaryValue get_binary_value = 9;

		//message ResponseSetBinaryValue{
      message SetBinaryValue{ 
			optional bytes binary      	= 1;   // Binary file.
			optional bytes file_name   	= 2;   // File name.
			optional uint64 file_size   = 3;
			optional EncodeType  scan_type = 4; // Scan with decode type.
			optional FileType    file_type = 5; // File type.
		}

//		repeated ResponseSetBinaryValue  reponse_set_binary_value = 10;
    repeated SetBinaryValue  set_binary_value = 10;

}
